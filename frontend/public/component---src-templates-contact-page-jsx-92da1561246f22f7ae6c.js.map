{"version":3,"sources":["webpack:///./src/components/ContactForm.jsx","webpack:///./src/templates/contact-page.jsx"],"names":["SUBMISSION_STATUS","useValidatedState","initialState","validationOptions","useState","state","setState","errorMessage","setErrorMessage","newState","required","_","get","length","maxLength","message","RegExp","pattern","value","test","ContactForm","status","setStatus","name","nameError","setName","email","emailError","setEmail","messageError","setMessage","configFields","contactFormConfig","fields","className","onSubmit","event","submitForm","label","error","type","placeholder","onChange","target","data","errors","preventDefault","Object","values","filter","e","v","console","postBody","keys","forEach","key","queryString","toQueryString","fetch","url","method","headers","mode","referrerPolicy","body","then","catch","obj","map","encodeURIComponent","join","FormField","children","newClassName","props","React","cloneElement","InvalidInputError","FailedSubmissionError","ContactPage","content","BodyComponent","contentComponent","HTMLContent","query","site","additionalPropsExtractor","tabTitle"],"mappings":"i5BAQMA,EAAiC,YAAjCA,EAA2D,cAA3DA,EAA6F,oBAgF7FC,EAAoB,SAACC,EAAcC,GAAuB,IAAD,EACnCC,mBAASF,GAA5BG,EADsD,KAC/CC,EAD+C,OAErBF,mBAAS,IAA1CG,EAFsD,KAExCC,EAFwC,KAoB7D,MAAO,CAACH,EAAOE,EAhBW,SAACE,GACzBH,EAASG,GACLN,EAAkBO,WAAaD,EACjCD,EAAgBG,IAAEC,IAAIT,EAAkBO,SAAU,UAAWP,EAAkBO,WAEtED,EAASI,OAASF,IAAEC,IAAIT,EAAmB,mBACpDK,EAAgBL,EAAkBW,UAAUC,SAEnCJ,IAAEC,IAAIT,EAAmB,gBAAiB,cAAea,SAAWb,EAAkBc,QAAQC,MAAMC,KAAKV,GAClHD,EAAgBL,EAAkBc,QAAQF,SAG1CP,EAAgB,OAOPY,EArGK,WAAO,IAAD,EACIhB,mBAASJ,GAA9BqB,EADiB,KACTC,EADS,OAGWrB,EAAkB,GAAI,CACvDS,SARyB,yBASzBI,UAAW,CACTI,MAAO,GACPH,QAAS,iCAJNQ,EAHiB,KAGXC,EAHW,KAGAC,EAHA,OAWcxB,EAAkB,GAAI,CAC1DS,SAhByB,yBAiBzBO,QAAS,CACPC,MAAO,kBACPH,QAAS,2BAJNW,EAXiB,KAWVC,EAXU,KAWEC,EAXF,OAmBoB3B,EAAkB,GAAI,CAACS,SAvBxC,2BAuBpBK,EAnBiB,KAmBRc,EAnBQ,KAmBMC,EAnBN,KAqBlBC,EAAeC,EAAkBC,OAEvC,OAAIZ,IAAWrB,EAEX,wBAAIkC,UAAU,SAAd,4DAOF,0BAAMC,SAAU,SAAAC,GACZX,EAAQF,GACRK,EAASF,GACTI,EAAWf,GAIXsB,EAAWD,EAFE,CAACb,OAAMG,QAAOX,WACZ,CAACS,YAAWG,aAAYE,gBACPP,KAElC,kBAAC,EAAD,CAAWgB,MAAOP,EAAaR,KAAKe,MAAOC,MAAOf,GAChD,2BAAOU,UAAU,QACfM,KAAK,OACLC,YAAaV,EAAaR,KAAKkB,YAC/BlB,KAAK,OACLmB,SAAU,SAAAN,GAAK,OAAIX,EAAQW,EAAMO,OAAOzB,WAG5C,kBAAC,EAAD,CAAWoB,MAAOP,EAAaL,MAAMY,MAAOC,MAAOZ,GACjD,2BAAOO,UAAU,QACfM,KAAK,OACLC,YAAaV,EAAaL,MAAMe,YAChClB,KAAK,QACLmB,SAAU,SAAAN,GAAK,OAAIR,EAASQ,EAAMO,OAAOzB,WAG7C,kBAAC,EAAD,CAAWoB,MAAOP,EAAahB,QAAQuB,MAAOC,MAAOV,GACnD,8BAAUK,UAAU,WAClBO,YAAaV,EAAahB,QAAQ0B,YAClClB,KAAK,UACLmB,SAAU,SAAAN,GAAK,OAAIN,EAAWM,EAAMO,OAAOzB,WAG/C,4BAAQgB,UAAU,+CAA+CM,KAAK,UAAtE,UAGA,kBAAC,EAAD,CAAuBnB,OAAQA,MAoC/BgB,EAAa,SAACD,EAAOQ,EAAMC,EAAQvB,GAGvC,GAFAc,EAAMU,iBAGJC,OAAOC,OAAOH,GAAQI,QAAO,SAAAC,GAAC,MAAU,KAANA,KAAUrC,OAAS,GACrDkC,OAAOC,OAAOJ,GAAMK,QAAO,SAAAE,GAAC,MAAU,KAANA,KAAUtC,OAAS,EAEnD,OAAOuC,QAAQb,MAAMM,GAGvB,IAAIQ,EAAW,GAEfN,OAAOO,KAAKV,GAAMW,SAAQ,SAAAjB,GAAK,OAAKe,EAASrB,EAAkBC,OAAOK,GAAOkB,KAAOZ,EAAKN,MACzF,IAAMmB,EAAcC,EAAcL,GAElC,IACEM,MAAM3B,EAAkB4B,IAAK,CAC3BC,OAAQ7B,EAAkB6B,OAC1BC,QAAS9B,EAAkB8B,QAC3BC,KAAM/B,EAAkB+B,KACxBC,eAAgBhC,EAAkBgC,eAClCC,KAAMR,IAEPS,MAAK,kBAAM5C,EAAUtB,MACrBmE,OAAM,kBAAM7C,EAAUtB,MACvB,MAAOuC,GACPa,QAAQb,MAAMA,GACdjB,EAAUtB,KAIR0D,EAAgB,SAACU,GAAD,OACpBrB,OAAOO,KAAKc,GAAKC,KAAI,SAAAb,GAAG,OAAOA,EAAP,IAAcc,mBAAmBF,EAAIZ,OAASe,KAAK,MAEvEC,EAAY,SAAC,GAA8B,IAA7BlC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,MAAOkC,EAAc,EAAdA,SAC1BC,EAAenC,EAAQkC,EAASE,MAAMzC,UAAY,cAAgBuC,EAASE,MAAMzC,UAEvF,OACE,yBAAKA,UAAU,SACb,2BAAOA,UAAU,SAASI,GAC1B,yBAAKJ,UAAU,WACZ0C,IAAMC,aAAaJ,EAAU,CAACvC,UAAWwC,IAC1C,kBAAC,EAAD,CAAmBnC,MAAOA,OAM5BuC,EAAoB,SAAC,GAAa,IAAZvC,EAAW,EAAXA,MAC1B,OAAIA,EAEA,0BAAML,UAAU,oBAAoBK,GAG/B,MAILwC,EAAwB,SAAC,GAC7B,OAD0C,EAAZ1D,SACfrB,EAEX,yBAAKkC,UAAU,oBAAf,qGAKK,MCnLX,kFASO,IAAM8C,EAAc,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,QACrBC,EADoD,EAAtBC,kBACMC,IAE1C,OACE,6BAASlD,UAAU,WACjB,kBAACgD,EAAD,CAAeD,QAASA,IACxB,kBAAC,EAAD,QAQOI,GAFEC,sBAAKN,EAAa,CAAEO,yBAFjB,iBAAO,CAACC,SAAU,iBAIlB","file":"component---src-templates-contact-page-jsx-92da1561246f22f7ae6c.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport _ from 'lodash'\r\n\r\nimport contactFormConfig from '../data/contactForm.config'\r\n\r\nconst requiredErrorMessage = 'This field is required'\r\n\r\nconst SUBMISSION_STATUS = { SUBMITTED: 'SUBMITTED', UNSUBMITTED: 'UNSUBMITTED', SUBMISSION_FAILED: 'SUBMISSION_FAILED' }\r\n\r\nconst ContactForm = () => {\r\n  const [status, setStatus] = useState(SUBMISSION_STATUS.UNSUBMITTED)\r\n\r\n  const [name, nameError, setName] = useValidatedState(\"\", {\r\n    required: requiredErrorMessage,\r\n    maxLength: {\r\n      value: 80,\r\n      message: 'Max length is 80 characters',\r\n    }\r\n  })\r\n  \r\n  const [email, emailError, setEmail] = useValidatedState(\"\", {\r\n    required: requiredErrorMessage,\r\n    pattern: {\r\n      value: /^\\S+@\\S+\\.\\S+$/i,\r\n      message: 'Invalid email address'\r\n    }\r\n  })\r\n\r\n  const [message, messageError, setMessage] = useValidatedState(\"\", {required: requiredErrorMessage})\r\n\r\n  const configFields = contactFormConfig.fields\r\n\r\n  if (status === SUBMISSION_STATUS.SUBMITTED) {\r\n    return (\r\n      <h2 className=\"title\">\r\n        Form submitted! We&apos;ll get back to you as soon as we can.\r\n      </h2>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={event => {\r\n        setName(name)\r\n        setEmail(email)\r\n        setMessage(message)\r\n        \r\n        const data = {name, email, message}\r\n        const errors = {nameError, emailError, messageError}\r\n        submitForm(event, data, errors, setStatus)\r\n      }}>\r\n      <FormField label={configFields.name.label} error={nameError}>\r\n        <input className=\"input\" \r\n          type=\"text\"\r\n          placeholder={configFields.name.placeholder}\r\n          name=\"name\"\r\n          onChange={event => setName(event.target.value)}\r\n        />\r\n      </FormField>\r\n      <FormField label={configFields.email.label} error={emailError}>\r\n        <input className=\"input\"\r\n          type=\"text\" \r\n          placeholder={configFields.email.placeholder}\r\n          name=\"email\"\r\n          onChange={event => setEmail(event.target.value)}\r\n        />\r\n        </FormField>\r\n      <FormField label={configFields.message.label} error={messageError}>\r\n        <textarea className=\"textarea\"\r\n          placeholder={configFields.message.placeholder}\r\n          name=\"message\"\r\n          onChange={event => setMessage(event.target.value)}\r\n        />\r\n      </FormField>\r\n      <button className=\"button has-background-primary has-text-white\" type=\"submit\">\r\n        Submit\r\n      </button>\r\n      <FailedSubmissionError status={status} />\r\n    </form>\r\n  )\r\n}\r\n\r\n/**\r\n * Helper function for setting state with validation\r\n * @param {Any} initialState \r\n * @param {Object} validationOptions\r\n * @returns {Array} [state, errorMessage, setValidatedState]\r\n */\r\nconst useValidatedState = (initialState, validationOptions) => {\r\n  const [state, setState] = useState(initialState)\r\n  const [errorMessage, setErrorMessage] = useState(\"\")\r\n\r\n  const setValidatedState = (newState) => {\r\n    setState(newState)\r\n    if (validationOptions.required && !newState) {\r\n      setErrorMessage(_.get(validationOptions.required, \"message\", validationOptions.required))\r\n\r\n    } else if (newState.length > _.get(validationOptions, 'maxLength.value')) {\r\n      setErrorMessage(validationOptions.maxLength.message)\r\n\r\n    } else if (_.get(validationOptions, 'pattern.value', '') instanceof RegExp && !validationOptions.pattern.value.test(newState)) {\r\n      setErrorMessage(validationOptions.pattern.message)\r\n\r\n    } else {\r\n      setErrorMessage(\"\")\r\n    }\r\n  }\r\n\r\n  return [state, errorMessage, setValidatedState]\r\n}\r\n\r\nexport default ContactForm\r\n\r\nconst submitForm = (event, data, errors, setStatus) => {\r\n  event.preventDefault() // Prevents submission from redirecting the page\r\n\r\n  if (\r\n    Object.values(errors).filter(e => e !== \"\").length > 0 || \r\n    Object.values(data).filter(v => v === \"\").length > 0 // This is required to handle race conditions with setState\r\n  ) {\r\n    return console.error(errors)\r\n  }\r\n\r\n  let postBody = {}\r\n\r\n  Object.keys(data).forEach(label =>  postBody[contactFormConfig.fields[label].key] = data[label])\r\n  const queryString = toQueryString(postBody)\r\n\r\n  try {\r\n    fetch(contactFormConfig.url, {\r\n      method: contactFormConfig.method,\r\n      headers: contactFormConfig.headers,\r\n      mode: contactFormConfig.mode,\r\n      referrerPolicy: contactFormConfig.referrerPolicy,\r\n      body: queryString,\r\n    })\r\n    .then(() => setStatus(SUBMISSION_STATUS.SUBMITTED))\r\n    .catch(() => setStatus(SUBMISSION_STATUS.SUBMISSION_FAILED))\r\n  } catch (error) {\r\n    console.error(error)\r\n    setStatus(SUBMISSION_STATUS.SUBMISSION_FAILED)\r\n  }\r\n}\r\n\r\nconst toQueryString = (obj) =>\r\n  Object.keys(obj).map(key => `${key}=${encodeURIComponent(obj[key])}`).join('&')\r\n\r\nconst FormField = ({label, error, children}) => {\r\n  const newClassName = error ? children.props.className + ' is-primary' : children.props.className\r\n  \r\n  return (\r\n    <div className=\"field\">\r\n      <label className=\"label\">{label}</label>\r\n      <div className=\"control\">\r\n        {React.cloneElement(children, {className: newClassName})}\r\n        <InvalidInputError error={error} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst InvalidInputError = ({error}) => {\r\n  if (error) {\r\n    return (\r\n      <span className=\"has-text-primary\">{error}</span>\r\n    )\r\n  } else { \r\n    return null\r\n  } \r\n}\r\n\r\nconst FailedSubmissionError = ({status}) => {\r\n  if (status === SUBMISSION_STATUS.SUBMISSION_FAILED) {\r\n    return (\r\n      <div className=\"has-text-primary\">\r\n        Your submission failed. Please try again or directly email us at enquiries@strawberry-fair.org.uk\r\n      </div>\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nFormField.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  error: PropTypes.object,\r\n  children: PropTypes.element.isRequired\r\n}\r\n\r\nInvalidInputError.propTypes = {\r\n  error: PropTypes.object\r\n}\r\n\r\nFailedSubmissionError.propTypes = {\r\n  status: PropTypes.oneOf(Object.values(SUBMISSION_STATUS))\r\n}\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { HTMLContent } from '../components/Content'\nimport { site } from '../util/templating'\nimport ContactForm from '../components/ContactForm'\n\n// This is used by the website and for CMS previews\nexport const ContactPage = ({content, contentComponent}) => {\n  const BodyComponent = contentComponent || HTMLContent\n  \n  return (\n    <section className=\"section\">\n      <BodyComponent content={content} />\n      <ContactForm/>\n    </section>\n)}\n\nconst extractor = () => ({tabTitle: 'Contact Us'})\n\nexport default site(ContactPage, { additionalPropsExtractor: extractor })\n\nexport const query = graphql`\nquery contactPageTemplate($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n      html\n    }\n  }\n`\n\nContactPage.propTypes = {\n  content: PropTypes.string.isRequired,\n  contentComponent: PropTypes.elementType\n}\n"],"sourceRoot":""}