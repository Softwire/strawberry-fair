{"version":3,"sources":["webpack:///./src/templates/event-info.jsx"],"names":["EventTypeList","eventTypes","className","map","eventType","key","EventInfo","image","slug","content","contentComponent","Consumer","value","EventInfoWithContext","isPreview","BodyComponent","HTMLContent","Fragment","href","slice","download","imageInfo","src","_","get","alt","generateEventSubtitle","data","isMobile","dateTimeRange","markdownRemark","frontmatter","startDate","Date","startDateTime","endDate","endDateTime","bothCurrentYear","areCurrentYear","start","toDateTimeString","isShort","withYear","provideEnd","areSameDay","toLocaleTimeString","hour","minute","site","additionalPropsExtractor","subtitle","isNarrow","query"],"mappings":"2FAAA,uPAcMA,EAAgB,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACpB,OAAIA,EAEI,yBAAKC,UAAU,QACVD,EAAWE,KAAI,SAAAC,GAAS,OAAI,0BAAMC,IAAKD,EAAWF,UAAU,OAAOE,OAIrE,MASFE,EAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAMP,EAAf,EAAeA,WAAYQ,EAA3B,EAA2BA,QAASC,EAApC,EAAoCA,iBAApC,OACrB,kBAAC,IAAeC,SAAhB,MACK,SAAAC,GAAK,OAAI,kBAACC,EAAD,CAAsBC,UAAWF,EAAOL,MAAOA,EAAOC,KAAMA,EACtEP,WAAYA,EAAYQ,QAASA,EAASC,iBAAkBA,QAI9DG,EAAuB,SAAC,GAAqE,IAApEC,EAAmE,EAAnEA,UAAWP,EAAwD,EAAxDA,MAAOC,EAAiD,EAAjDA,KAAMP,EAA2C,EAA3CA,WAAYQ,EAA+B,EAA/BA,QACzDM,EADwF,EAAtBL,kBAC9BM,IAE1C,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACjB,EAAD,CAAeC,WAAYA,KACzBa,GAAaN,EACX,uBAAGN,UAAU,+BAA+BgB,KAAI,OAASV,EAAKW,MAAM,GAAI,GAAxB,OAAkCC,UAAQ,GAA1F,mBAGA,KACJ,kBAAC,IAAD,CAAwBC,UAAWd,EAAQ,CAACe,IAAKC,IAAEC,IAAIjB,EAAO,0CAA2CA,EAAMe,KACnEG,IAAKlB,EAAMkB,KAAO,OAC9D,kBAACV,EAAD,CAAeN,QAASA,MAevBiB,EAAwB,SAACC,EAAMC,QAAmB,IAAnBA,OAAS,GACjD,IAAMC,EAAgBF,EAAKG,eAAeC,YAAYF,cAEhDG,EAAY,IAAIC,KAAKJ,EAAcK,eACnCC,EAAU,IAAIF,KAAKJ,EAAcO,aAEjCC,EAAkBC,YAAeN,EAAWG,GAE5CI,EAAQC,YAAiBR,EAAW,CAACS,QAASb,EAAUc,UAAWL,IAEzE,OAAKR,EAAcc,WAERC,YAAWZ,EAAWG,GACtBI,EAAK,IAAOJ,EAAQU,mBAAmB,QAAS,CAACC,KAAM,UAAWC,OAAQ,YAE1ER,EAAK,MAASC,YAAiBL,EAAS,CAACM,QAASb,EAAUc,UAAWL,IAJvEE,GAWAS,sBAAK1C,EAAW,CAAE2C,yBAFf,SAACtB,GAAD,MAAW,CAACuB,SAAUxB,EAAsBC,KAEQwB,UAAU,IAEzE,IAAMC,EAAK","file":"component---src-templates-event-info-jsx-35d434eb210c0ebf7089.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport _ from 'lodash'\n\nimport PreviewCompatibleImage from '../components/PreviewCompatibleImage'\nimport { HTMLContent } from '../components/Content'\nimport { site } from '../util/templating'\nimport { areSameDay, areCurrentYear, toDateTimeString } from '../util/dates'\nimport { PreviewContext } from '../util/context'\n\n\n\n// List of types shown near top of event\nconst EventTypeList = ({eventTypes}) => {\n    if (eventTypes) {\n        return (\n            <div className=\"tags\">\n                {eventTypes.map(eventType => <span key={eventType} className=\"tag\">{eventType}</span>)}\n            </div>\n        )\n    } else {\n        return null\n    }\n}\n\nEventTypeList.propTypes = {\n    eventTypes: PropTypes.arrayOf(PropTypes.string)\n}\n\n// used by website and CMS previews\nexport const EventInfo = ({image, slug, eventTypes, content, contentComponent}) => (\n    <PreviewContext.Consumer>\n        {value => <EventInfoWithContext isPreview={value} image={image} slug={slug}\n        eventTypes={eventTypes} content={content} contentComponent={contentComponent} />}\n    </PreviewContext.Consumer>\n)\n\nconst EventInfoWithContext = ({isPreview, image, slug, eventTypes, content, contentComponent}) => {\n    const BodyComponent = contentComponent || HTMLContent\n\n    return (\n        <React.Fragment>\n            <EventTypeList eventTypes={eventTypes} />\n            {!isPreview && slug ? (\n                <a className=\"button event-download-button\" href={`/ics${slug.slice(0, -1)}.ics`} download>\n                    Add to Calendar\n                </a>\n            ) : null}\n            <PreviewCompatibleImage imageInfo={image ? {src: _.get(image, 'srcNode.childImageSharp.fixedAspect.src', image.src),\n                                                        alt: image.alt} : null} />\n            <BodyComponent content={content} />\n        </React.Fragment>\n    )\n}\n\nEventInfoWithContext.propTypes = {\n    isPreview: PropTypes.bool,\n    eventTypes: EventTypeList.propTypes.eventTypes,\n    image: PropTypes.object.isRequired,\n    content: PropTypes.string.isRequired,\n    contentComponent: PropTypes.elementType\n}\n\nEventInfo.propTypes = EventInfoWithContext.propTypes\n\nexport const generateEventSubtitle = (data, isMobile=false) => {\n    const dateTimeRange = data.markdownRemark.frontmatter.dateTimeRange\n\n    const startDate = new Date(dateTimeRange.startDateTime)\n    const endDate = new Date(dateTimeRange.endDateTime)\n    \n    const bothCurrentYear = areCurrentYear(startDate, endDate)\n\n    const start = toDateTimeString(startDate, {isShort: isMobile, withYear: !bothCurrentYear})\n    \n    if (!dateTimeRange.provideEnd) {\n        return start\n    } else if (areSameDay(startDate, endDate)) {\n        return start + `–${endDate.toLocaleTimeString(\"en-GB\", {hour: \"2-digit\", minute: \"2-digit\"})}`\n    } else {\n        return start + ` – ${toDateTimeString(endDate, {isShort: isMobile, withYear: !bothCurrentYear})}`\n    }\n    // This allows for events to go on overnight / over multiple days\n}\n\nconst extractor = (data) => ({subtitle: generateEventSubtitle(data)})\n\nexport default site(EventInfo, { additionalPropsExtractor: extractor, isNarrow: false })\n\nexport const query = graphql`\nquery eventInfoTemplate($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n        ...EventFragment\n    }\n    heroData: allMarkdownRemark(filter: {id: {eq: $id}}) {\n        ...HeroFragment\n    }\n}\n`"],"sourceRoot":""}