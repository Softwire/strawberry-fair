{"version":3,"sources":["webpack:///./src/components/calendar/EventFilter.jsx","webpack:///./src/components/MainTileWithTwoStackedSideTiles.jsx","webpack:///./src/components/NewsArticleSnapshots.jsx","webpack:///./src/templates/event-info.jsx","webpack:///./src/components/VerticalTileColumn.jsx","webpack:///./src/components/StrawberryCard.jsx","webpack:///./src/util/filters.js","webpack:///./src/util/generateScrapbookImageMap.js","webpack:///./src/components/home-page/ScrapbookImages.jsx","webpack:///./src/components/home-page/ContentBlocks.jsx","webpack:///./src/components/home-page/BaseBlock.jsx","webpack:///./src/components/home-page/CalendarBlock.jsx","webpack:///./src/components/home-page/NewsBlock.jsx","webpack:///./src/components/home-page/TwitterBlock.jsx","webpack:///./src/templates/home-page.jsx","webpack:///./src/components/Panel.jsx","webpack:///./src/components/calendar/EventType.js","webpack:///./src/components/calendar/Upcoming.jsx","webpack:///./src/components/calendar/getEventList.js"],"names":["EnabledFilterTag","name","remove","className","onClick","DisabledFilterTag","add","EventFilterBlock","filterProps","withDivider","Fragment","EventFilterTags","allFilters","activeFilters","addFilter","removeFilter","clearFilters","tags","filter","includes","push","key","filterEvents","events","eventFilters","event","every","eventType","frontmatter","eventTypes","MainTileWithTwoStackedSideTiles","mainTile","sideTopTile","sideBottomTile","NewsArticleSnapshot","newsArticles","publicationDate","Date","node","date","imageInfo","_","get","image","to","fields","slug","PreviewCompatibleImage","style","width","title","toDateString","content","shortExcerpt","longExcerpt","NewsArticleSnapshots","newsArticleSnapshots","map","EventTypeList","EventInfo","contentComponent","Consumer","value","EventInfoWithContext","isPreview","BodyComponent","HTMLContent","href","slice","download","src","alt","generateEventSubtitle","data","isMobile","dateTimeRange","markdownRemark","startDate","startDateTime","endDate","endDateTime","bothCurrentYear","areCurrentYear","start","toDateTimeString","isShort","withYear","provideEnd","areSameDay","toLocaleTimeString","hour","minute","site","additionalPropsExtractor","subtitle","isNarrow","query","VerticalTileColumn","props","children","StrawberryCard","imageAltText","text","StrawberryCardDesktop","StrawberryCardMobile","StrawberryTiles","strawberryTiles","length","tileWrapper","index","strawberryTile","isPublic","StrawberryTile","useFilters","filterList","useState","filters","setFilters","filterName","concat","sortByAspect","imageList","sort","a","b","getAspect","mapImagesToColumns","Error","combination","getRandInt","deepShuffle","outerColImgIndexes","innerColImgIndexes","imagesToRender","i","Math","random","pop","setColumnWidths","imageMap","innerColAspects","outer","inner","getInnerColAspect","adjustStartingWidths","widthPair","outerColWidths","innerColWidths","loopCounter","heights","relativeHeights","leftMax","max","rightMax","images","j","columnAspects","innerColMap","imgA","imgB","floor","shuffle","arr","shuffled","Array","isArray","nestedArr","useScrapbookLayout","setImageMap","useEffect","selectedImages","generateScrapbookImageMap","ScrapbookImages","validImages","srcNode","ScrapbookImgs","outerCols","outerColMap","idx","position","OuterColumn","InnerColumn","img","ScrapbookImg","ContentBlock","contentTitle","contentSubtitle","scrapbookImages","ContentBlocks","contentBlocks","contentBlocksHtml","block","BaseBlock","altBackground","UpcomingEventsDisplay","previewEventList","UpcomingEventsDisplayWithContext","eventTypeList","getEventList","isOnOrAfterDay","EventFilter","Panel","getEventPanelData","MoreEventsLinkBox","CalendarBlock","calendarBlock","NewsBlock","newsBlock","TwitterBlock","twitterBlock","data-height","data-dnt","HomePage","graphqlData","newsData","edges","tabTitle","isWide","PanelBlock","panelData","emptyText","isViewportWidthDesktop","getPanels","panel","EmptyPanel","mobileSubtitle","excerpt","panelImage","PanelImage","panelHeader","PanelHeader","panelExcerpt","PanelExcerpt","el","Upcoming","UpcomingWithContext","allMarkdownRemark","nodes","event1","event2","range1","range2","start1","start2","areSameMinute","end1"],"mappings":"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","file":"component---src-templates-home-page-jsx-c22815ad19e13774c4b5.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst EnabledFilterTag = ({name, remove}) => (\n    <a className=\"tag is-primary is-light\" onClick={remove}>{name}</a>\n)\n\nEnabledFilterTag.propTypes = {\n    name: PropTypes.string,\n    remove: PropTypes.func\n}\n\nconst DisabledFilterTag = ({name, add}) => (\n    <a className=\"tag\" onClick={add}>{name}</a>\n)\n\nDisabledFilterTag.propTypes = {\n    name: PropTypes.string,\n    add: PropTypes.func\n}\n\nexport const EventFilterBlock = ({filterProps, withDivider}) => (\n    <React.Fragment>\n        <div className=\"filter-block\">\n            <EventFilterTags filterProps={filterProps} />\n        </div>\n        {withDivider ? <hr className=\"filter-block-divider\"/> : null}\n    </React.Fragment>\n)\n\nexport const EventFilterTags = ({filterProps: {allFilters, activeFilters, addFilter, removeFilter, clearFilters}}) => {\n    // Construct array of tag objects\n    let tags = []\n    for (const filter of allFilters) {\n        if (activeFilters.includes(filter)) {\n            tags.push(<EnabledFilterTag key={filter} name={filter} remove={removeFilter(filter)} />)\n        } else {\n            tags.push(<DisabledFilterTag key={filter} name={filter} add={addFilter(filter)} />)\n        }\n    }\n\n    return (\n        <span className=\"tags\">\n            <span className=\"tag is-white\">Filters: </span>\n            {tags}\n            <a className=\"tag is-delete\" onClick={clearFilters} />\n        </span>\n    )\n}\n\nEventFilterTags.propTypes = {\n    filterProps: PropTypes.shape({\n        allFilters: PropTypes.arrayOf(PropTypes.string),\n        activeFilters: PropTypes.arrayOf(PropTypes.string),\n        addFilter: PropTypes.func.isRequired,\n        removeFilter: PropTypes.func.isRequired,\n        clearFilters: PropTypes.func.isRequired\n    })\n}\n\nEventFilterBlock.propTypes = EventFilterTags.propTypes\n\n// Function to filter a list of events based on a list of types.\n// We return only events for whom all types in the filter are present.\nexport const filterEvents = (events, eventFilters) => {\n    return events.filter(event => eventFilters.every(eventType => event.frontmatter.eventTypes.includes(eventType)))\n}\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst MainTileWithTwoStackedSideTiles = ({mainTile, sideTopTile, sideBottomTile}) => (\r\n  <div className=\"tile is-ancestor\">\r\n    <div className=\"tile is-parent\">\r\n      <div className=\"tile is-child box main-box\">\r\n        {mainTile}\r\n      </div>\r\n    </div>\r\n    <div className=\"tile is-4 is-vertical is-parent small-box\">\r\n      <div className=\"tile is-child box small-box\">\r\n        {sideTopTile}  \r\n      </div>\r\n      <div className=\"tile is-child box small-box\">\r\n        {sideBottomTile}  \r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nMainTileWithTwoStackedSideTiles.propTypes = {\r\n  mainTile: PropTypes.element,\r\n  sideTopTile: PropTypes.element,\r\n  sideBottomTile: PropTypes.element\r\n}\r\n\r\nexport default MainTileWithTwoStackedSideTiles\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\nimport _ from 'lodash'\r\n\r\nimport PreviewCompatibleImage from './PreviewCompatibleImage'\r\nimport MainTileWithTwoStackedSideTiles from './MainTileWithTwoStackedSideTiles'\r\nimport { newsArticleValidator } from './validators'\r\nimport { HTMLContent } from './Content'\r\nimport { toDateString } from '../util/dates'\r\n\r\n//display style of the event date\r\nexport const displayStyle = {\r\n  day: \"numeric\",\r\n  month: \"long\",\r\n  year: \"numeric\"\r\n}\r\n\r\nexport const NewsArticleSnapshot = ({newsArticles}) => {\r\n  const publicationDate = new Date(newsArticles.node.frontmatter.date)\r\n\r\n  const imageInfo = _.get(\r\n    newsArticles.node.frontmatter.image,\r\n    'srcNode.childImageSharp.fixedAspect',\r\n    newsArticles.node.frontmatter.image\r\n  )\r\n  const imageWrapperStyle = {\r\n    width: \"100%\"\r\n  }\r\n\r\n  return (\r\n    <article className=\"news-preview\">\r\n      <Link to={newsArticles.node.fields.slug}>\r\n        <PreviewCompatibleImage imageInfo={imageInfo} style={imageWrapperStyle} />\r\n        <h2 className=\"title is-5 news-snapshot-title\">{newsArticles.node.frontmatter.title}</h2>\r\n      </Link>\r\n      <h3 className=\"subtitle is-7\">{toDateString(publicationDate)}</h3>\r\n      <HTMLContent content={newsArticles.node.shortExcerpt} className=\"news-excerpt news-excerpt-short\" />\r\n      <HTMLContent content={newsArticles.node.longExcerpt} className=\"news-excerpt news-excerpt-long\" />\r\n  </article>\r\n  )\r\n}\r\n\r\nNewsArticleSnapshot.propTypes = {\r\n  newsArticles: newsArticleValidator\r\n}\r\n\r\nconst NewsArticleSnapshots = ({newsArticles}) => {\r\n  const newsArticleSnapshots = newsArticles.map(newsArticles => \r\n    <NewsArticleSnapshot \r\n      newsArticles={newsArticles}\r\n      key={newsArticles.node.fields.slug}\r\n    />\r\n  )\r\n\r\n  return (\r\n    <MainTileWithTwoStackedSideTiles \r\n      mainTile={newsArticleSnapshots[0]}\r\n      sideTopTile={newsArticleSnapshots[1]}\r\n      sideBottomTile={newsArticleSnapshots[2]}\r\n    />\r\n  )\r\n}\r\n\r\nNewsArticleSnapshots.propTypes = {\r\n  newsArticles: PropTypes.arrayOf(newsArticleValidator)\r\n}\r\n\r\nexport default NewsArticleSnapshots","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport _ from 'lodash'\n\nimport PreviewCompatibleImage from '../components/PreviewCompatibleImage'\nimport { HTMLContent } from '../components/Content'\nimport { site } from '../util/templating'\nimport { areSameDay, areCurrentYear, toDateTimeString } from '../util/dates'\nimport { PreviewContext } from '../util/context'\n\n\n\n// List of types shown near top of event\nconst EventTypeList = ({eventTypes}) => {\n    if (eventTypes) {\n        return (\n            <div className=\"tags\">\n                {eventTypes.map(eventType => <span key={eventType} className=\"tag\">{eventType}</span>)}\n            </div>\n        )\n    } else {\n        return null\n    }\n}\n\nEventTypeList.propTypes = {\n    eventTypes: PropTypes.arrayOf(PropTypes.string)\n}\n\n// used by website and CMS previews\nexport const EventInfo = ({image, slug, eventTypes, content, contentComponent}) => (\n    <PreviewContext.Consumer>\n        {value => <EventInfoWithContext isPreview={value} image={image} slug={slug}\n        eventTypes={eventTypes} content={content} contentComponent={contentComponent} />}\n    </PreviewContext.Consumer>\n)\n\nconst EventInfoWithContext = ({isPreview, image, slug, eventTypes, content, contentComponent}) => {\n    const BodyComponent = contentComponent || HTMLContent\n\n    return (\n        <React.Fragment>\n            <EventTypeList eventTypes={eventTypes} />\n            {!isPreview && slug ? (\n                <a className=\"button event-download-button\" href={`/ics${slug.slice(0, -1)}.ics`} download>\n                    Add to Calendar\n                </a>\n            ) : null}\n            <PreviewCompatibleImage imageInfo={image ? {src: _.get(image, 'srcNode.childImageSharp.fixedAspect.src', image.src),\n                                                        alt: image.alt} : null} />\n            <BodyComponent content={content} />\n        </React.Fragment>\n    )\n}\n\nEventInfoWithContext.propTypes = {\n    isPreview: PropTypes.bool,\n    eventTypes: EventTypeList.propTypes.eventTypes,\n    image: PropTypes.object.isRequired,\n    content: PropTypes.string.isRequired,\n    contentComponent: PropTypes.elementType\n}\n\nEventInfo.propTypes = EventInfoWithContext.propTypes\n\nexport const generateEventSubtitle = (data, isMobile=false) => {\n    const dateTimeRange = data.markdownRemark.frontmatter.dateTimeRange\n\n    const startDate = new Date(dateTimeRange.startDateTime)\n    const endDate = new Date(dateTimeRange.endDateTime)\n    \n    const bothCurrentYear = areCurrentYear(startDate, endDate)\n\n    const start = toDateTimeString(startDate, {isShort: isMobile, withYear: !bothCurrentYear})\n    \n    if (!dateTimeRange.provideEnd) {\n        return start\n    } else if (areSameDay(startDate, endDate)) {\n        return start + `–${endDate.toLocaleTimeString(\"en-GB\", {hour: \"2-digit\", minute: \"2-digit\"})}`\n    } else {\n        return start + ` – ${toDateTimeString(endDate, {isShort: isMobile, withYear: !bothCurrentYear})}`\n    }\n    // This allows for events to go on overnight / over multiple days\n}\n\nconst extractor = (data) => ({subtitle: generateEventSubtitle(data)})\n\nexport default site(EventInfo, { additionalPropsExtractor: extractor, isNarrow: true })\n\nexport const query = graphql`\nquery eventInfoTemplate($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n        ...EventFragment\n    }\n    heroData: allMarkdownRemark(filter: {id: {eq: $id}}) {\n        ...HeroFragment\n    }\n}\n`","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst VerticalTileColumn = props => (\r\n  <div className=\"column is-narrow\">\r\n    <div className=\"tile is-ancestor\">\r\n      <div className=\"tile is-parent is-vertical\">\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nVerticalTileColumn.propTypes = {\r\n  children: PropTypes.node\r\n}\r\n\r\nexport default VerticalTileColumn\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport VerticalTileColumn from './VerticalTileColumn'\r\n\r\nconst defaultIcon = '/img/strawberry-icon.png'\r\nconst defaultImageAltText = 'Strawberry Icon'\r\n\r\nexport const StrawberryCard = ({image, imageAltText, text}) => {\r\n  return (\r\n    <React.Fragment>\r\n      <StrawberryCardDesktop image={image} imageAltText={imageAltText} text={text} />\r\n      <StrawberryCardMobile image={image} imageAltText={imageAltText} text={text} />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst StrawberryCardDesktop = ({image, imageAltText, text}) => {\r\n  return (\r\n    <div className=\"box has-background-primary is-hidden-mobile strawberry-square\">\r\n      <figure className=\"image is-64x64 strawberry-card-desktop-image\">\r\n        <img src={image || defaultIcon} alt={imageAltText || defaultImageAltText} />\r\n      </figure>\r\n      <p className=\"has-text-white\">{text}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst StrawberryCardMobile = ({image, imageAltText, text}) => {\r\n  return (\r\n    <div className=\"box has-background-primary is-hidden-tablet\">\r\n      <div className=\"media\">\r\n        <figure className=\"media-left\">\r\n          <p className=\"image is-64x64\">\r\n            <img src={image || defaultIcon} alt={imageAltText || defaultImageAltText} />\r\n          </p>\r\n        </figure>\r\n        <div className=\"media-content\">\r\n          <p className=\"has-text-white\">{text}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const StrawberryTiles = ({strawberryTiles}) => {\r\n  if (strawberryTiles && strawberryTiles.length > 0) {\r\n    return (\r\n      <VerticalTileColumn>\r\n        {strawberryTiles.map((tileWrapper, index) => \r\n          tileWrapper.strawberryTile.isPublic && <StrawberryTile text={tileWrapper.strawberryTile.text} key={index}/>)}\r\n      </VerticalTileColumn>\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nconst StrawberryTile = ({isPublic, image, imageAltText, text}) => (\r\n  <div className=\"tile is-child\">\r\n    <StrawberryCard isPublic={isPublic} image={image} imageAltText={imageAltText} text={text} />\r\n  </div>\r\n)\r\n\r\nStrawberryCard.propTypes = {\r\n  image: PropTypes.string,\r\n  imageAltText: PropTypes.string,\r\n  text: PropTypes.string\r\n}\r\n\r\nStrawberryCardDesktop.propTypes = StrawberryCard.propTypes\r\nStrawberryCardMobile.propTypes = StrawberryCard.propTypes\r\nStrawberryTile.propTypes = StrawberryCard.propTypes\r\n\r\nStrawberryTiles.propTypes = { \r\n  strawberryTiles: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      strawberryTile: PropTypes.shape(\r\n        Object.assign({isPublic: PropTypes.bool.isRequired}, StrawberryCard.PropTypes)\r\n      )\r\n    })\r\n  )\r\n}\r\n","import { useState } from 'react'\n\nexport const useFilters = (filterList) => {\n    const [filters, setFilters] = useState([])\n\n    const addFilter = (filterName) => (\n        () => {setFilters(filters.concat(filterName))}\n    )\n\n    const removeFilter = (filterName) => (\n        () => {setFilters(filters.filter(name => name !== filterName))}\n    )\n\n    const clearFilters = () => {\n        setFilters([])\n    }\n\n    return {\n        allFilters: filterList,\n        activeFilters: filters,\n        addFilter: addFilter,\n        removeFilter: removeFilter,\n        clearFilters: clearFilters\n    }\n}\n","import _ from 'lodash'\n\n/* LAYOUT CONTROL CONSTANTS */\n\n/** Min height difference ratio between the shortest and tallest inner column (to minimise white space) - must be a num between 0 and 1 */\nconst minInnerColHeightDiffRatio = 0.6\nconst minOuterColHeightDiffRatio = 0.8\n/** Min Bulma height of an inner column - must be an int between 1 and 6 */\nconst minInnerColWidth = 4\n\n\n/* IMAGE HANDLING FUNCTIONS */\n\n/** Returns 3-dimensional array representing Bulma column structure of ScrapbookImages component */\nexport const generateScrapbookImageMap = (images, isPreview) => {\n    // In CMS preview, aspect ratios are ignored and images are not stacked\n    const imageList = sortByAspect(images)\n    let imageMap = mapImagesToColumns(imageList, isPreview)\n    return setColumnWidths(imageMap)\n}\n\nconst sortByAspect = (imageList) => imageList.sort((a, b) => getAspect(a) - getAspect(b))\n\n/** Returns a randomised map of images */\nconst mapImagesToColumns = (imageList, isPreview=false) => {\n    if (!imageList || imageList.length === 0) {\n        throw new Error(\"No images passed to generateScrapbookImageMap()\")\n    }\n    if (imageList.length !== 6) {\n        throw new Error(\"Wrong number of images passed to generateScrapbookImageMap(): must receive exactly 6 images\")\n    }\n\n    // Chosen to ensure aspects are evenly balanced\n    const possibleCombinations = [\n        [ [[0], [2, 5]], [[1], [3, 4]] ],\n        [ [[0], [3, 4]], [[1], [2, 5]] ],\n        [ [[0], [3, 5]], [[1], [2, 4]] ]\n    ]\n\n    const combination = possibleCombinations[getRandInt(3)]\n    const permutation = deepShuffle(combination)\n\n    return permutation.map((outerColImgIndexes) => {\n        return outerColImgIndexes.map((innerColImgIndexes) => {\n            \n            const imagesToRender = innerColImgIndexes.map((i) => imageList[i])\n            \n            // Randomly determine whether to render 1 or 2 images in innerCol where necessary\n            if (innerColImgIndexes.length === 2 && (isPreview || Math.random() < 0.5)) {\n                imagesToRender.pop()\n            }\n\n            return imagesToRender\n        })\n    })\n}\n\nconst setColumnWidths = (imageMap) => {\n    const innerColAspects = imageMap.map(outer => outer.map(inner => getInnerColAspect(inner)))\n\n    const adjustStartingWidths = widthPair => {\n        switch (getRandInt(3)) {\n            case 1:\n                widthPair[0]++\n                widthPair[1]--\n                break;\n            case 2:\n                widthPair[0]--\n                widthPair[1]++\n                break;\n            default:\n                break;\n        }\n    }\n\n    // Initial bulma column width estimates - these may be adjusted\n    const outerColWidths = [6, 6]\n    const innerColWidths = [[6, 6], [6, 6]]\n\n    // Randomise them a little to begin\n    adjustStartingWidths(outerColWidths)\n    adjustStartingWidths(innerColWidths[0])\n    adjustStartingWidths(innerColWidths[1])\n\n    // max number of loop iterations expected. \n    // This guards against an infinite loop cause by incorrect setting of the height limit ratios\n    // this should never happen, but we guard against it anyway\n    let loopCounter = 18\n\n    // iteratively adjust column heights.\n    // For CMS previews we have no aspect ratio information so skip this step.\n    while(loopCounter-- > 0) {\n        const heights = relativeHeights(innerColAspects, innerColWidths, outerColWidths)\n\n        // balance the left inner column heights\n        if (heights[0][0] / heights[0][1] < minInnerColHeightDiffRatio && innerColWidths[0][1] > minInnerColWidth) {\n            innerColWidths[0][0]++\n            innerColWidths[0][1]--\n            continue\n        }\n        if (heights[0][1] / heights[0][0] < minInnerColHeightDiffRatio && innerColWidths[0][0] > minInnerColWidth) {\n            innerColWidths[0][0]--\n            innerColWidths[0][1]++\n            continue\n        }\n\n        // balance the right inner column heights\n        if (heights[1][0] / heights[1][1] < minInnerColHeightDiffRatio && innerColWidths[1][1] > minInnerColWidth) {\n            innerColWidths[1][0]++\n            innerColWidths[1][1]--\n            continue\n        }\n        if (heights[1][1] / heights[1][0] < minInnerColHeightDiffRatio && innerColWidths[1][0] > minInnerColWidth) {\n            innerColWidths[1][0]--\n            innerColWidths[1][1]++\n            continue\n        }\n\n        // balance the outer column heights based on max innner column heights\n        const leftMax = Math.max(...heights[0])\n        const rightMax = Math.max(...heights[1])\n        if (leftMax / rightMax < minOuterColHeightDiffRatio && outerColWidths[1] > minInnerColWidth) {\n            outerColWidths[0]++\n            outerColWidths[1]--\n            continue\n        }\n        if (leftMax / rightMax > 1 / minOuterColHeightDiffRatio && outerColWidths[0] > minInnerColWidth) {\n            outerColWidths[0]--\n            outerColWidths[1]++\n            continue\n        }\n\n        // at this point column widths have been adjusted\n        // to approximately balance column height\n        break;\n    }\n\n    return imageMap.map((outer, i) => {\n        return { \n            width: `is-${outerColWidths[i]}`, \n            images: outer.map((inner, j) => {\n                return { width: `is-${innerColWidths[i][j]}`, images: inner }\n            })\n        }\n    })\n}\n\nconst relativeHeights = (columnAspects, innerColWidths, outerColWidths) => {\n    return columnAspects.map((outer, i) => outer.map((inner, j) => outerColWidths[i] * innerColWidths[i][j] / inner))\n}\n\n//** Tries to get the aspect ratio of an image. Aspect ratio is unavailable for CMS previews */\nconst getAspect = (image) => _.get(image, 'srcNode.childImageSharp.fluid.aspectRatio', 1)\n\n/** Returns the combined aspect ratio of two images stacked on top of each other */\nconst getStackedAspect = (imgA, imgB) => (getAspect(imgA) * getAspect(imgB)) / (getAspect(imgA) + getAspect(imgB))\n\nconst getInnerColAspect = (innerColMap) => (innerColMap.length === 1 ? getAspect(innerColMap[0]) : getStackedAspect(innerColMap[0], innerColMap[1]))\n\n/* RANDOMISATION FUNCTIONS */\n\n/** Returns 0 <= randInt < max */\nconst getRandInt = (max) => Math.floor(Math.random() * max)\n\nexport const shuffle = (arr) => {\n    const shuffled = [...arr]\n    for (let i = shuffled.length - 1; i > 0; i--) {\n        const j = getRandInt(i + 1);\n        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]\n    }\n    return shuffled\n}\n\nconst deepShuffle = (arr) => {\n    if (Array.isArray(arr[0])) {\n        const shuffled = arr.map((nestedArr) => deepShuffle(nestedArr))\n        return shuffle(shuffled)\n    }\n    else {\n        return shuffle(arr)\n    }\n}","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { childImageSharpValidator, previewCompatibleImageValidator } from '../validators'\nimport PreviewCompatibleImage from '../PreviewCompatibleImage'\nimport { generateScrapbookImageMap, shuffle } from '../../util/generateScrapbookImageMap'\nimport { PreviewContext } from '../../util/context'\n\nconst useScrapbookLayout = (images, isPreview) => {\n    const [imageMap, setImageMap] = useState(null)\n\n    useEffect(() => {\n        const selectedImages = shuffle(images).slice(0, 6)\n        setImageMap(generateScrapbookImageMap(selectedImages, isPreview))\n    }, [images])\n\n    return imageMap\n}\n\n/** Expects an array of at least 6 images */\nexport const ScrapbookImages = ({images}) => {\n    const validImages = images.filter((image) => image.src || image.srcNode)\n    if (validImages.length < 6) {\n        return null\n    }\n    return (\n        <div className=\"scrapbook-container\">\n            <PreviewContext.Consumer>\n                {value => <ScrapbookImgs images={validImages} isPreview={value} />}\n            </PreviewContext.Consumer>\n        </div>\n    )\n}\n\nconst ScrapbookImgs = ({images, isPreview}) => {\n    const imageMap = useScrapbookLayout(images, isPreview)\n\n    if (imageMap === null) {\n        return null\n    }\n\n    const outerCols = imageMap.map((outerColMap, idx) => (\n        <OuterColumn\n                outerColMap={outerColMap}\n                position={(idx === 0 ? \"left-top\" : \"right-bottom\")}\n                key={idx} />\n    ))\n\n    return (\n        <div className=\"columns scrapbook-columns\">\n            {outerCols}\n        </div>\n    )\n}\n\nconst OuterColumn = ({outerColMap: {width, images}, position}) => (\n    <div className={`column scrapbook-column outer-column ${width} ${position}`}>\n        <div className=\"columns scrapbook-columns is-mobile\">\n            {images.map((innerColMap, idx) => <InnerColumn innerColMap={innerColMap}\n                                                                position={position}\n                                                                key={idx} />)}\n        </div>\n    </div>\n)\n\nconst InnerColumn = ({innerColMap: {width, images}, position}) => (\n    <div className={`column scrapbook-column inner-column ${width} ${position}`}>\n        <div className = \"columns scrapbook-columns is-multiline\">\n            {images.map((img, idx) => <ScrapbookImg image={img} key={idx} />)}\n        </div>\n    </div>\n)\n\nconst ScrapbookImg = ({image}) => {\n    return (\n        <div className=\"column scrapbook-column is-full\">\n            <PreviewCompatibleImage imageInfo={image} />\n        </div>\n    )\n}\n\nScrapbookImg.propTypes = {\n    image: previewCompatibleImageValidator\n}\n\nInnerColumn.propTypes = { \n    innerColMap: PropTypes.shape({\n        width: PropTypes.string,\n        images: PropTypes.arrayOf(previewCompatibleImageValidator),\n    }),\n    position: PropTypes.string\n}\n\nOuterColumn.propTypes = {\n    outerColMap: PropTypes.shape({\n        width: PropTypes.string,\n        images: PropTypes.arrayOf(InnerColumn.propTypes.innerColMap)\n    }),\n    position: PropTypes.string\n}\n\nScrapbookImgs.propTypes = {\n    images: PropTypes.arrayOf(childImageSharpValidator),\n    isPreview: PropTypes.bool\n}\n\nScrapbookImages.propTypes = { images: ScrapbookImgs.propTypes.images }","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { ScrapbookImages } from './ScrapbookImages'\r\nimport { StrawberryCard } from '../StrawberryCard'\r\n\r\nconst ContentBlock = ({contentTitle, contentSubtitle, scrapbookImages, content, strawberryTile, BodyComponent}) => (\r\n  <section className=\"section home-page-section home-page-content-block\">\r\n    <ScrapbookImages images={scrapbookImages}/>\r\n    <h1 className=\"title is-2 is-size-3-mobile\">{contentTitle}</h1>\r\n    <div className=\"columns\">\r\n      <div className=\"column\">\r\n        <h3 className=\"subtitle is-5\">{contentSubtitle}</h3>\r\n        <BodyComponent content={content}/>\r\n      </div>\r\n      <div className=\"column home-strawberry-column is-narrow\">\r\n        {strawberryTile.isPublic && <StrawberryCard text={strawberryTile.text} />}\r\n      </div>\r\n    </div>\r\n  </section>\r\n)\r\n\r\nContentBlock.propTypes = {\r\n  contentTitle: PropTypes.node,\r\n  contentSubtitle: PropTypes.node,\r\n  scrapbookImages: ScrapbookImages.propTypes.images,\r\n  content: PropTypes.node,\r\n  strawberryTile: PropTypes.shape({\r\n    isPublic: PropTypes.bool,\r\n    text: PropTypes.string\r\n  }),\r\n  BodyComponent: PropTypes.elementType\r\n}\r\n\r\nconst ContentBlocks = ({contentBlocks, contentBlocksHtml, BodyComponent}) => (\r\n  <React.Fragment>\r\n    {contentBlocks && contentBlocks.map((block, index) => (\r\n        <ContentBlock \r\n          contentTitle={block.title}\r\n          contentSubtitle={block.subtitle}\r\n          scrapbookImages={block.scrapbookImages || []}\r\n          content={contentBlocksHtml[index]}\r\n          strawberryTile={block.strawberryTile}\r\n          BodyComponent={BodyComponent}\r\n          key={index}\r\n        />\r\n      )\r\n    )}\r\n  </React.Fragment>\r\n)\r\n\r\nContentBlocks.propTypes = {\r\n  contentBlocks: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: ContentBlock.propTypes.contentTitle,\r\n      subtitle: ContentBlock.propTypes.contentSubtitle,\r\n      scrapbookImages: ContentBlock.propTypes.scrapbookImages,\r\n      strawberryTile: ContentBlock.propTypes.strawberryTile,\r\n      BodyComponent: PropTypes.elementType\r\n    })\r\n  ),\r\n  contentBlocksHtml: PropTypes.arrayOf(PropTypes.string),\r\n  BodyComponent: PropTypes.elementType\r\n}\r\n\r\nexport default ContentBlocks\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst BaseBlock = ({block, altBackground = \"\", children}) => (\r\n    <div className={`home-page-section ${altBackground && \"has-background-light-grey is-viewport-width\"}`}>\r\n      <section className={`section ${altBackground && \"section-root\"}`}>\r\n        <div className=\"container wide-container\">\r\n            <h1 className=\"title is-3 is-size-4-mobile\">{block.title}</h1>\r\n            <div className=\"columns\">\r\n              <div className=\"column is-three-fifths\">\r\n                <h3 className=\"subtitle is-5\">{block.subtitle}</h3>\r\n              </div>\r\n            </div>\r\n            {children}\r\n        </div>\r\n    </section>\r\n  </div>\r\n)\r\n\r\nBaseBlock.propTypes = {\r\n  block: PropTypes.shape({\r\n    title: PropTypes.node,\r\n    subtitle: PropTypes.node\r\n  }),\r\n  altBackground: PropTypes.bool,\r\n  children: PropTypes.node\r\n}\r\n\r\nexport default BaseBlock\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\nimport _ from 'lodash'\r\n\r\nimport BaseBlock from './BaseBlock'\r\nimport { getEventList } from '../calendar/getEventList'\r\nimport { eventPropTypeValidator } from '../validators'\r\nimport { EventFilterTags, filterEvents } from '../calendar/EventFilter'\r\nimport { eventTypeList } from '../calendar/EventType'\r\nimport { PreviewContext } from '../../util/context'\r\nimport { useFilters } from '../../util/filters'\r\nimport { isOnOrAfterDay } from '../../util/dates'\r\nimport { generateEventSubtitle } from '../../templates/event-info'\r\nimport { HTMLContentSmall } from '../Content'\r\nimport { getEventPanelData } from '../calendar/Upcoming'\r\nimport { Panel } from '../Panel'\r\n\r\nconst CalendarBlock = ({calendarBlock, events}) => (\r\n  <BaseBlock block={calendarBlock} altBackground={true}>\r\n    <UpcomingEventsDisplay events={events} />\r\n  </BaseBlock>\r\n)\r\n\r\nconst UpcomingEventsDisplay = ({events}) => (\r\n  <PreviewContext.Consumer>\r\n    {value => <UpcomingEventsDisplayWithContext isPreview={value} previewEventList={events} />}\r\n  </PreviewContext.Consumer>\r\n)\r\n\r\nconst UpcomingEventsDisplayWithContext = ({isPreview, previewEventList}) => {\r\n  const filterProps = useFilters(eventTypeList)\r\n\r\n  let events = isPreview ? previewEventList : getEventList()\r\n  events = events.filter(event => isOnOrAfterDay(new Date(), new Date(event.frontmatter.dateTimeRange.provideEnd ? event.frontmatter.dateTimeRange.endDateTime : event.frontmatter.dateTimeRange.startDateTime)))\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <EventFilterTags filterProps={filterProps} />\r\n      <div className=\"columns is-multiline\">\r\n        {filterEvents(events, filterProps.activeFilters)\r\n          .map(event => (\r\n            <div className=\"column is-half\" key={event.fields.slug}>\r\n              <div className=\"box xpanel-block\">\r\n                <Panel {...getEventPanelData(event)} />\r\n              </div>\r\n            </div>\r\n            )\r\n          ).slice(0, 4)  // Only take the first 4 events\r\n        }\r\n        <MoreEventsLinkBox />\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport const EventMediaBlock = ({event}) => {\r\n  const eventUrl = event.fields.slug\r\n\r\n  return (\r\n  <div className=\"media event\">\r\n      <div className=\"media-left\">\r\n          <Link to={eventUrl} className=\"image is-64x64\">\r\n              {event.frontmatter.image ? <img src={_.get(event.frontmatter.image, 'srcNode.childImageSharp.fixedAspect.src', event.frontmatter.image.src)}\r\n                                              alt={event.frontmatter.image.alt} /> : null}\r\n          </Link>\r\n      </div>\r\n      <div className=\"media-content\">\r\n          <Link to={eventUrl}>\r\n              <h2 className=\"title is-4\"><strong>{event.frontmatter.title}</strong></h2>\r\n              <h3 className=\"subtitle is-5 is-hidden-tablet\">{generateEventSubtitle({markdownRemark: event}, true)}</h3>\r\n              <h3 className=\"subtitle is-5 is-hidden-mobile\">{generateEventSubtitle({markdownRemark: event}, false)}</h3>\r\n          </Link>\r\n          <HTMLContentSmall className=\"add-margin-top\" content={event.excerpt} />\r\n      </div>\r\n  </div>\r\n  )\r\n}\r\n\r\nconst MoreEventsLinkBox = () => (\r\n  <div className=\"column is-half\">\r\n    <Link className=\"box button\" to=\"/events\">See more events...</Link>\r\n  </div>\r\n)\r\n\r\nCalendarBlock.propTypes = {\r\n  calendarBlock: BaseBlock.propTypes.block,\r\n  events: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n        node: eventPropTypeValidator\r\n    })\r\n  )\r\n}\r\n\r\nEventMediaBlock.propTypes = {\r\n  event: PropTypes.object\r\n}\r\n\r\nUpcomingEventsDisplay.propTypes = {\r\n  events: CalendarBlock.propTypes.events\r\n}\r\n\r\nUpcomingEventsDisplayWithContext.propTypes = {\r\n  isPreview: PropTypes.bool.isRequired,\r\n  previewEventList: UpcomingEventsDisplay.propTypes.events\r\n}\r\n\r\nexport default CalendarBlock\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport NewsArticleSnapshots from '../NewsArticleSnapshots'\r\nimport BaseBlock from './BaseBlock'\r\n\r\nconst NewsBlock = ({newsBlock, newsArticles}) => (\r\n  <BaseBlock block={newsBlock}>\r\n    <NewsArticleSnapshots newsArticles={newsArticles || \"Hello\"}/>\r\n  </BaseBlock>\r\n)\r\n\r\nNewsBlock.propTypes = {\r\n  newsBlock: BaseBlock.propTypes.block,  // Reuse same validator\r\n  newsArticles: PropTypes.oneOfType([\r\n    NewsArticleSnapshots.propTypes.newsArticles,  // Reuse validator\r\n    PropTypes.string  // Placeholder \"Hello\"\r\n  ])\r\n}\r\n\r\nexport default NewsBlock\r\n","import React from 'react'\r\n\r\nimport BaseBlock from './BaseBlock'\r\n\r\nconst TwitterBlock = ({twitterBlock}) => (\r\n  <BaseBlock block={twitterBlock} altBackground={true}>\r\n    <div className=\"columns is-centered\">\r\n      <div className=\"column is-9\">\r\n        <a className=\"twitter-timeline\" data-height=\"700\" data-dnt=\"true\" href=\"https://twitter.com/strawberry_fair\">\r\n          Tweets by Strawberry Fair\r\n        </a>\r\n      </div>\r\n    </div>\r\n  </BaseBlock>\r\n)\r\n\r\nTwitterBlock.propTypes = {\r\n  twitterBlock: BaseBlock.propTypes.block\r\n}\r\n\r\nexport default TwitterBlock\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { HTMLContent } from '../components/Content'\n\nimport ContentBlocks from '../components/home-page/ContentBlocks'\nimport CalendarBlock from '../components/home-page/CalendarBlock'\nimport NewsBlock from '../components/home-page/NewsBlock'\nimport TwitterBlock from '../components/home-page/TwitterBlock'\n\nimport { site } from '../util/templating'\n\n// This is used by the website and for CMS previews\nexport const HomePage = ({contentBlocks, contentBlocksHtml, calendarBlock, events, newsBlock, newsArticles, twitterBlock, contentComponent}) => {\n    const BodyComponent = contentComponent || HTMLContent\n\n    return (\n      <React.Fragment>\n        <ContentBlocks \n          contentBlocks={contentBlocks}\n          contentBlocksHtml={contentBlocksHtml}\n          BodyComponent={BodyComponent}/>\n        <CalendarBlock calendarBlock={calendarBlock} events={events} />\n        <NewsBlock newsBlock={newsBlock} newsArticles={newsArticles}/>\n        <TwitterBlock twitterBlock={twitterBlock}/>\n        {\n          // TODO: Finish committee meeting calendars\n          // TODO: Finish News overview\n          // TODO: Finish Twitter integration\n        }\n      </React.Fragment>\n  )\n}\n\nHomePage.propTypes = {\n  contentBlocks: ContentBlocks.propTypes.contentBlocks,\n  contentBlocksHtml: ContentBlocks.propTypes.contentBlocksHtml,\n  calendarBlock: CalendarBlock.propTypes.calendarBlock,\n  events: CalendarBlock.propTypes.events,\n  newsBlock: NewsBlock.propTypes.newsBlock,\n  newsArticles: NewsBlock.propTypes.newsArticles,\n  twitterBlock: TwitterBlock.propTypes.twitterBlock,\n  contentComponent: PropTypes.elementType,\n}\n\nconst extractor = graphqlData => ({\n  contentBlocksHtml: graphqlData.markdownRemark.fields.contentBlocksHtml,\n  newsArticles: graphqlData.newsData.edges,\n  tabTitle: 'Strawberry Fair'\n})\n\nexport default site(HomePage, { additionalPropsExtractor: extractor, isWide: true })\n\n\nexport const query = graphql`\nquery homePageTemplate($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      frontmatter {\n        title\n        contentBlocks {\n          title\n          subtitle\n          scrapbookImages {\n            alt\n            srcNode {\n              childImageSharp {\n                fluid(traceSVG: {background: \"#fff\", color: \"#ae1414\",  turdSize: 50}) {\n                  ...GatsbyImageSharpFluid_tracedSVG\n                }\n              }\n            }\n          }\n          strawberryTile {\n            isPublic\n            text\n          }\n        }\n        calendarBlock {\n          title\n          subtitle\n        }\n        newsBlock {\n          title\n          subtitle\n        }\n        twitterBlock {\n          title\n          subtitle\n        }\n      }\n      fields {\n        contentBlocksHtml\n      }\n      html\n    }\n    newsData: allMarkdownRemark(filter: {frontmatter: {templateKey: {eq: \"news-article\"}}}, sort: {fields: frontmatter___date, order: DESC}) {\n      edges {\n        node {\n          ...NewsFragment\n        }\n      }\n    }\n    heroData: allMarkdownRemark(filter: {id: {eq: $id}}) {\n      ...HeroFragment\n    }\n  }\n`\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport _ from 'lodash'\n\nimport PreviewCompatibleImage from './PreviewCompatibleImage'\nimport { HTMLContentSmall } from './Content'\n\n// Component used in News Archive, Upcoming Events & Calendar Day Modal\n// CSS classes use name \"xpanel\" to distinguish from Bulma panel class\nexport const PanelBlock = ({panelData, emptyText, isViewportWidthDesktop}) => (\n    <div className={`xpanel-block`}>\n        {\n            getPanels(panelData, emptyText).map((panel, idx) => (\n                <div key={idx} className={`xpanel-background ${isViewportWidthDesktop ? \"is-viewport-width\" : \"\"}`}>\n                    <section className = \"section section-root\">\n                        <div className=\"container wide-container\">\n                            {panel}\n                        </div>\n                    </section>\n                </div>\n            ))\n        }\n    </div>\n)\n\nconst EmptyPanel = ({text}) => {\n    return (\n        <div className=\"xpanel\">\n            {text}\n        </div>\n    )\n}\n\nexport const Panel = ({image, slug, title, subtitle, mobileSubtitle, excerpt}) => {\n\n    const panelImage = <PanelImage image={image} />\n    const panelHeader = <PanelHeader slug={slug}\n                                     title={title}\n                                     subtitle={subtitle}\n                                     mobileSubtitle={mobileSubtitle} />\n    const panelExcerpt = <PanelExcerpt excerpt={excerpt} />\n\n    return (\n        <div className=\"xpanel\">\n            <div className=\"xpanel-header\">\n                {panelHeader}\n            </div>\n            <div className=\"xpanel-image\">\n                {panelImage}\n            </div>\n            <div className=\"xpanel-excerpt\">\n                {panelExcerpt}\n            </div>\n        </div>\n    )\n}\n\nconst PanelImage = ({image}) => {\n    if (image) {\n        const imageInfo = {\n            alt: image.alt,\n            src: _.get(image, 'srcNode.childImageSharp.fixedAspect.src', image.src)\n        }\n        return <PreviewCompatibleImage imageInfo={imageInfo} />\n    }\n    else {\n        return null\n    }\n}\n\nconst PanelHeader = ({slug, title, subtitle, mobileSubtitle}) => (\n    <Link to={slug}>\n        <h2 className={`title is-4 upcoming-title`}><strong>{title}</strong></h2>\n        <h3 className={`subtitle is-6 upcoming-subtitle is-hidden-mobile`}><strong>{subtitle}</strong></h3>\n        <h3 className={`subtitle is-6 upcoming-subtitle is-hidden-tablet`}><strong>{mobileSubtitle || subtitle}</strong></h3>\n    </Link>\n)\n\nconst PanelExcerpt = ({excerpt}) => (\n    <HTMLContentSmall content={excerpt} />\n)\n\n\nconst getPanels = (panelData, emptyText) => {\n    if (panelData.length > 0) {\n        return panelData.map((el, i) => <Panel image={el.image}\n                                               slug={el.slug}\n                                               title={el.title}\n                                               subtitle={el.subtitle}\n                                               mobileSubtitle={el.mobileSubtitle}\n                                               excerpt={el.excerpt}\n                                               key={i} />)\n    }\n    return [<EmptyPanel key=\"1\" text={emptyText || \"\"} />]\n}\n\nPanelExcerpt.propTypes = { excerpt: PropTypes.string }\n\nPanelHeader.propTypes = {\n    slug: PropTypes.string,\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    mobileSubtitle: PropTypes.string,\n}\n\nPanelImage.propTypes = { image: PropTypes.object }\n\nPanel.propTypes = {\n    image: PropTypes.object,\n    slug: PropTypes.string,\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    mobileSubtitle: PropTypes.string,\n    excerpt: PropTypes.string,\n}\n\nEmptyPanel.propTypes = { text: PropTypes.string }\n\nPanelBlock.propTypes = {\n    panelData: PropTypes.arrayOf(PropTypes.object).isRequired,\n    emptyText: PropTypes.string,\n    isViewportWidthDesktop: PropTypes.bool\n}\n","// List of allowed event types.\n// IF YOU UPDATE THIS LIST MAKE SURE YOU ALSO UPDATE THE LIST IN static/admin/config.yml\n// THEY MUST ALWAYS BE IDENTICAL\nexport const eventTypeList = [\n    'Benefit gig',\n    'Meeting - Programming',\n    'Meeting - Finance',\n    'Band competition',\n    'Other',\n]\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { PanelBlock } from '../Panel'\nimport { eventPropTypeValidator } from '../validators'\nimport { EventFilterBlock, filterEvents } from './EventFilter'\nimport { eventTypeList } from './EventType'\nimport { getEventList } from './getEventList'\nimport { PreviewContext } from '../../util/context'\nimport { useFilters } from '../../util/filters'\nimport { isOnOrAfterDay } from '../../util/dates'\nimport { generateEventSubtitle } from '../../templates/event-info'\n\n\nexport const Upcoming = ({events}) => (  // 'events' is only_ used if it is a preview, otherwise it uses a static query\n    <PreviewContext.Consumer>\n        {value => <UpcomingWithContext isPreview={value} previewEventList={events} />}\n    </PreviewContext.Consumer>\n)\n\nconst UpcomingWithContext = ({isPreview, previewEventList}) => {\n    const filterProps = useFilters(eventTypeList)\n\n    // Get list of events occurring today or later\n    let events = isPreview ? previewEventList : getEventList()\n    events = events.filter(event => isOnOrAfterDay(new Date(), new Date(event.frontmatter.dateTimeRange.provideEnd ? event.frontmatter.dateTimeRange.endDateTime : event.frontmatter.dateTimeRange.startDateTime)))\n\n    const maxItems = 5\n\n    // Construct array of event panel data\n    const panelData = filterEvents(events, filterProps.activeFilters).slice(0, maxItems).map(event => getEventPanelData(event))\n\n    const emptyText = \"No events match the selected filters.\"\n\n    return (\n        <React.Fragment>\n            <h1 className=\"title\">Upcoming Events</h1>\n            <div>\n                <EventFilterBlock filterProps={filterProps} withDivider={false} />\n                <PanelBlock panelData={panelData} emptyText={emptyText} isViewportWidthDesktop={true}/>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport const getEventPanelData = (event) => {\n    return {\n        image: event.frontmatter.image,\n        slug: event.fields.slug,\n        title: event.frontmatter.title,\n        subtitle: generateEventSubtitle({markdownRemark: event}, false),\n        mobileSubtitle: generateEventSubtitle({markdownRemark: event}, true),\n        excerpt: event.excerpt\n    }\n}\n\n\nUpcoming.propTypes = {\n    events: PropTypes.arrayOf(\n        PropTypes.shape({\n            node: eventPropTypeValidator\n        })\n    )\n}\n\nUpcomingWithContext.propTypes = {\n    isPreview: PropTypes.bool.isRequired,\n    previewEventList: Upcoming.propTypes.events\n}\n","import { useStaticQuery, graphql } from 'gatsby'\n\nimport { areSameMinute } from '../../util/dates'\n\nexport const getEventList = () => {\n  const { allMarkdownRemark } = useStaticQuery(graphql`\n  query eventList {\n      allMarkdownRemark(filter: {frontmatter: {templateKey: {eq: \"event-info\"}}}, sort: {fields: frontmatter___dateTimeRange___startDateTime, order: ASC}) {\n          nodes {\n              ...EventFragment\n          }\n      }\n  }\n  `)\n\n  // Already started by start time, but if two events start at the same time, we want to sort then by the end time (if provided).\n  const nodesSorted = allMarkdownRemark.nodes.sort((event1, event2) => {\n    const range1 = event1.frontmatter.dateTimeRange\n    const range2 = event2.frontmatter.dateTimeRange\n    const start1 = new Date(range1.startDateTime)\n    const start2 = new Date(range2.startDateTime)\n\n    // Only need to do anything if they start at the same time\n    if (areSameMinute(start1, start2)) {\n      // Four cases, for each combination of each providing or not providing an end time.\n      // We'll deal with them all.\n      if (range1.provideEnd) {\n        const end1 = new Date(range1.endDateTime)\n\n        if (range2.provideEnd) {\n          const end2 = new Date(range2.endDateTime)\n          // Both ends provided, so sort by end date\n          return end1 - end2\n        } else {\n          // Range 2 has no defined end time, so ends first\n          return 1\n        }\n      } else {\n        if (range2.provideEnd) {\n          // Range 1 has no defined end time, so ends first\n          return -1\n        } else {\n          // Neither have a defined end, so they occur at the same time\n          return 0\n        }\n      }\n    } else {\n      // Leave in current order\n      return 0\n    }\n  })\n\n  return nodesSorted\n}\n"],"sourceRoot":""}