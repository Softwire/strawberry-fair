{"version":3,"sources":["webpack:///./src/components/calendar/CalendarDay.jsx","webpack:///./src/components/calendar/Calendar.jsx","webpack:///./src/templates/calendar-page.jsx","webpack:///./src/components/calendar/EventFilter.jsx","webpack:///./src/components/calendar/CalendarViewToggle.jsx","webpack:///./src/templates/event-info.jsx","webpack:///./src/util/filters.js","webpack:///./src/components/Panel.jsx","webpack:///./src/components/calendar/EventType.js","webpack:///./src/components/calendar/Upcoming.jsx","webpack:///./src/components/calendar/getEventList.js"],"names":["EventLink","slug","title","className","to","DayDescription","events","date","Fragment","slice","map","event","fields","frontmatter","key","length","CalendarDayModal","close","active","panelData","getEventPanelData","onClick","toLocaleDateString","longDateFormatOptions","Panel","emptyText","aria-label","DayText","areSameDay","Date","src","width","dateDisplayFormatOptions","weekday","day","month","year","CalendarDay","dateTime","useState","showModal","setShowModal","currentImage","setCurrentImage","eventsWithPics","filter","image","nImages","useEffect","timeoutVar","setTimeout","clearTimeout","internals","modalOn","modalOff","eventWithPic","style","backgroundImage","_","get","position","index","opacity","transition","Calendar","Consumer","value","isPreview","previewEventList","CalendarWithContext","focusDate","setFocusDate","filterProps","useFilters","eventTypeList","getEventList","daysInFocusMonth","getFullYear","getMonth","getDate","monthChange","n","newDate","setMonth","days","Array","keys","monthForward","monthBack","EventFilter","withDivider","dayNumber","eventsOnDate","filterEvents","activeFilters","MonthScrubber","dateTimeRange","startDateTime","CalendarPage","CalendarViewToggle","view","query","site","additionalPropsExtractor","data","allMarkdownRemark","edges","tabTitle","isWide","EnabledFilterTag","name","remove","DisabledFilterTag","add","EventFilterBlock","EventFilterTags","allFilters","addFilter","removeFilter","clearFilters","tags","includes","push","eventFilters","every","eventType","eventTypes","modifier","EventTypeList","EventInfo","content","contentComponent","EventInfoWithContext","BodyComponent","HTMLContent","href","download","imageInfo","alt","generateEventSubtitle","isMobile","markdownRemark","startDate","endDate","endDateTime","bothCurrentYear","areCurrentYear","start","toDateTimeString","isShort","withYear","provideEnd","toLocaleTimeString","hour","minute","subtitle","isNarrow","filterList","filters","setFilters","filterName","concat","PanelBlock","isViewportWidthDesktop","getPanels","panel","idx","EmptyPanel","text","mobileSubtitle","excerpt","panelImage","PanelImage","panelHeader","PanelHeader","panelExcerpt","PanelExcerpt","el","i","Upcoming","UpcomingWithContext","isOnOrAfterDay","nodes","sort","event1","event2","range1","range2","start1","start2","areSameMinute","end1"],"mappings":"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","file":"component---src-templates-calendar-page-jsx-6fa4e04e915d62badc28.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport _ from 'lodash'\n\nimport { eventPropTypeValidator } from '../validators'\nimport { areSameDay } from '../../util/dates'\nimport { PanelBlock } from '../Panel'\nimport { getEventPanelData } from './Upcoming'\n\n// How many events' names should we write in the box, at maximum?\nconst maxEvents = 3\n\n// Represents a day in the calendar. Will either be empty or contain a preview of an event.\nconst CalendarDay = ({dateTime, events}) => {\n    const date = new Date(dateTime)  // The actual Date this CalendarDay is representing\n\n    // Are we showing the modal?\n    const [ showModal, setShowModal ] = useState(false)\n\n    // Image setting for revolving images\n    const [ currentImage, setCurrentImage ] = useState(0)\n\n    // Revolving image hook\n    const eventsWithPics = events.filter(event => event.frontmatter.image)\n    const nImages = eventsWithPics.length\n    const imageRotateTimeMS = 4000\n    const imageFadeTimeS = 0.5\n\n    useEffect(() => {\n        if (nImages > 1) {\n            const timeoutVar = setTimeout(() => {\n                // Update current shown image counter\n                setCurrentImage((currentImage + 1) % nImages)\n            }, imageRotateTimeMS)\n\n            // Clean up if this component unmounts\n            return () => {\n                clearTimeout(timeoutVar)\n            }\n        }\n    })\n\n    const modalOn = () => {\n        setShowModal(true)\n    }\n\n    const modalOff = () => {\n        setShowModal(false)\n    }\n\n    let internals\n\n    if (eventsWithPics.length === 0) {\n        // No pictures to show\n        if (events.length === 0) {\n            internals = (\n                <React.Fragment>\n                    <CalendarDayModal date={date} close={modalOff} active={showModal} />\n                    <div className=\"box button has-text-left calendar-day\" onClick={modalOn}>\n                        <DayText date={date} />\n                    </div>\n                </React.Fragment>\n            )\n        } else {\n            internals = (\n                <React.Fragment>\n                    <CalendarDayModal date={date} events={events} close={modalOff} active={showModal} />\n                    <div className=\"box button has-text-left calendar-day has-text-white has-text-weight-bold is-primary-pale\" onClick={modalOn}>\n                        <DayDescription events={events} date={date} />\n                    </div>\n                </React.Fragment>\n            )\n        }\n    } else if (eventsWithPics.length === 1) {\n\n        const eventWithPic = eventsWithPics[0]\n\n        internals = (\n            <React.Fragment>\n                <CalendarDayModal date={date} events={events} close={modalOff} active={showModal} />\n                <div className=\"box button has-text-left calendar-day has-text-white has-text-weight-bold\" onClick={modalOn}\n                style={{\n                    backgroundImage: `url(${_.get(eventWithPic.frontmatter.image, 'srcNode.childImageSharp.editedFluid.src', eventWithPic.frontmatter.image.src)})`}}>\n                    <DayDescription events={events} date={date} />\n                </div>\n            </React.Fragment>\n        )\n    } else {\n        internals = (\n            <div style={{position: \"relative\"}}>\n                <CalendarDayModal date={date} events={events} close={modalOff} active={showModal} />\n                {eventsWithPics.map((event, index) =>\n                    <div key={event.fields.slug} className=\"box button has-text-left calendar-day has-text-white has-text-weight-bold\" onClick={modalOn} style={{\n                            backgroundImage: `url(${_.get(event.frontmatter.image, 'srcNode.childImageSharp.editedFluid.src', event.frontmatter.image.src)})`,\n                            opacity: index === currentImage ? 1 : 0,\n                            transition: `opacity ${imageFadeTimeS}s`,\n                            position: \"absolute\",\n                            width: \"100%\"}}>\n                        <DayDescription events={events} date={date} />\n                    </div>\n                )}\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"column is-half-mobile is-one-quarter-tablet is-2-desktop\">\n            {internals}\n        </div>\n    )\n}\n \nconst EventLink = ({slug, title}) => (\n    <p><Link className=\"has-text-white has-text-weight-medium calendar-day-text\" to={slug}>{title}</Link></p>\n)\n\nconst DayDescription = ({events, date}) => (\n    <React.Fragment>\n        <DayText date={date} />\n        {events.slice(0, maxEvents).map(event => (<EventLink slug={event.fields.slug} title={event.frontmatter.title} key={event.frontmatter.title} />))}\n        {events.length > maxEvents ? <p>...</p> : null}\n    </React.Fragment>\n)\n\nconst CalendarDayModal = ({date, events, close, active}) => {\n    const panelData = events ? events.map((event) => getEventPanelData(event)) : []\n    const emptyText = \"No events found.\"\n    \n    return (\n        <div className={`modal ${active ? \"is-active\" : \"\"}`}>\n            <div className=\"modal-background\" onClick={close} />\n            <div className=\"modal-content\">\n                <div className=\"message\">\n                    <h1 className=\"message-header is-primary\">{date.toLocaleDateString('en-GB', longDateFormatOptions)}</h1>\n                    <PanelBlock panelData={panelData} emptyText={emptyText} />\n                </div>\n            </div>\n            <button className=\"modal-close is-large\" aria-label=\"close\" onClick={close}></button>\n        </div>\n    )\n}\n\nconst DayText = ({date}) => (\n    <p>\n        {areSameDay(date, new Date()) ? (\n            // This day is today, so render a pencil circle around the day text\n            <img className=\"pencil-circle\" src=\"/img/pencil-circle.png\" width=\"140\" />\n        ) : null}\n        {date.toLocaleDateString('en-GB', dateDisplayFormatOptions)}\n    </p>\n)\n\nconst dateDisplayFormatOptions = {weekday: 'short', day: 'numeric'}\nconst longDateFormatOptions = {weekday: 'long', day: 'numeric', month: 'long', year: 'numeric'}\n\nexport default CalendarDay\n\nCalendarDay.propTypes = {\n    dateTime: PropTypes.instanceOf(Date),\n    events: PropTypes.arrayOf(\n        eventPropTypeValidator\n    )\n}\n\nEventLink.propTypes = {\n    slug: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired\n}\n\nDayDescription.propTypes = {\n    events: PropTypes.arrayOf(PropTypes.object).isRequired,\n    date: PropTypes.instanceOf(Date),\n}\n\nCalendarDayModal.propTypes = {\n    date: PropTypes.instanceOf(Date),\n    events: CalendarDay.propTypes.events,\n    close: PropTypes.func,\n    active: PropTypes.bool\n}\n\nDayText.propTypes = {\n    date: PropTypes.instanceOf(Date)\n}\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { FaChevronLeft, FaChevronRight } from 'react-icons/fa'\n\nimport CalendarDay from './CalendarDay'\nimport { areSameDay } from '../../util/dates'\nimport { eventTypeList } from './EventType'\nimport { eventPropTypeValidator } from '../validators'\nimport { EventFilterBlock, filterEvents } from './EventFilter'\nimport { getEventList } from './getEventList'\nimport { PreviewContext } from '../../util/context'\nimport { useFilters } from '../../util/filters'\n\nexport const Calendar = ({events}) => (\n    <PreviewContext.Consumer>\n        {value => <CalendarWithContext isPreview={value} previewEventList={events} />}\n    </PreviewContext.Consumer>\n)\n\nconst CalendarWithContext = ({isPreview, previewEventList}) => {\n    // Set state\n    const [ focusDate, setFocusDate ] = useState(new Date())\n    const filterProps = useFilters(eventTypeList)\n\n    // Get list of events\n    const events = isPreview ? previewEventList : getEventList()\n\n    // Calculate the number of days in the given month\n    const monthDate = new Date(focusDate.getFullYear(), focusDate.getMonth() + 1, 0)\n    const daysInFocusMonth = monthDate.getDate()\n\n    // Function to change the month\n    const monthChange = (n) => {\n        // Get current month\n        let newDate = new Date(focusDate)\n        const month = newDate.getMonth()\n        newDate.setMonth(month + n)\n\n        // Set focus to new date\n        setFocusDate(newDate)\n    }\n\n    // Function to increment the month\n    const monthForward = () => {\n        monthChange(1)\n    }\n\n    // Function to decrement the month\n    const monthBack = () => {\n        monthChange(-1)\n    }\n\n    const days = [...Array(daysInFocusMonth).keys()].map(n => n + 1)\n    // TODO: Figure out how to get this to work with screenreaders\n    // What would the corect semantic component for this be?\n    return (\n        <React.Fragment>\n            <MonthScrubber monthForward={monthForward} monthBack={monthBack} focusDate={focusDate} />\n            <div className=\"calendar panel\">\n                <EventFilterBlock filterProps={filterProps} withDivider={true} />\n                <div className=\"panel-block\">\n                    <div className=\"columns is-multiline is-mobile\">\n                        {days.map(dayNumber => {\n                            const date = new Date(focusDate.getFullYear(), focusDate.getMonth(), dayNumber)\n\n                            return (\n                                <CalendarDay\n                                    key={dayNumber}\n                                    dateTime={date}\n                                    events={eventsOnDate(date, filterEvents(events, filterProps.activeFilters))}\n                                />\n                            )\n                        })}\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst MonthScrubber = ({monthForward, monthBack, focusDate}) => (\n    <div className=\"month-scrubber\">\n        <button onClick={monthBack} className=\"button is-white\">\n            <span className=\"icon has-text-dark is-large\">\n                <FaChevronLeft />\n            </span>\n        </button>\n        <div className=\"calendar-month\">\n            <p className=\"title is-hidden-mobile\">{new Date(focusDate).toLocaleDateString('en-GB', {year: 'numeric', month: 'long'})}</p>\n            <p className=\"title is-hidden-tablet\">{new Date(focusDate).toLocaleDateString('en-GB', {month: 'long'})}</p>\n            <p className=\"title is-hidden-tablet\">{new Date(focusDate).toLocaleDateString('en-GB', {year: 'numeric'})}</p>\n        </div>\n        <button onClick={monthForward} className=\"button is-white\">\n            <span className=\"icon has-text-dark is-large\">\n                <FaChevronRight />\n            </span>\n        </button>\n    </div>\n)\n\nMonthScrubber.propTypes = {\n    monthForward: PropTypes.func.isRequired,\n    monthBack: PropTypes.func.isRequired,\n    focusDate: PropTypes.instanceOf(Date)\n}\n\nCalendar.propTypes = {\n    events: PropTypes.arrayOf(\n        PropTypes.shape({\n            node: eventPropTypeValidator\n        })\n    )\n}\n\nCalendarWithContext.propTypes = {\n    isPreview: PropTypes.bool.isRequired,\n    previewEventList: Calendar.propTypes.events\n}\n\nfunction eventsOnDate(date, events) {\n    // Array of events on this day, empty if none\n    return events.filter(event => areSameDay(new Date(event.frontmatter.dateTimeRange.startDateTime), date))\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { site } from '../util/templating'\nimport { Calendar } from '../components/calendar/Calendar'\nimport { CalendarViewToggle } from '../components/calendar/CalendarViewToggle'\nimport { eventPropTypeValidator } from '../components/validators'\n\nexport const CalendarPage = ({events}) => {\n  return (\n    <section>\n      <CalendarViewToggle view='calendar' />\n      <Calendar events={events} />\n    </section>\n  )\n}\n\nCalendarPage.propTypes = {\n  content: PropTypes.node,\n  contentComponent: PropTypes.elementType,\n  events: PropTypes.arrayOf(\n      PropTypes.shape({\n          node: eventPropTypeValidator\n      })\n  )\n}\n\nconst extractor = data => ({events: data.allMarkdownRemark.edges, tabTitle: \"Calendar\"})\n\nexport default site(CalendarPage, { additionalPropsExtractor: extractor, isWide: true })\n\nexport const query = graphql`\nquery calendarPageTemplate($id: String!) {\n  markdownRemark(id: { eq: $id }) {\n    html\n  }\n  allMarkdownRemark(filter: {frontmatter: {templateKey: {eq: \"event-info\"}}}, sort: {fields: frontmatter___dateTimeRange___startDateTime, order: ASC}) {\n    edges {\n      node {\n        ...EventFragment\n      }\n    }\n  }\n  heroData: allMarkdownRemark(filter: {id: {eq: $id}}) {\n    ...HeroFragment\n  }\n}\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst EnabledFilterTag = ({name, remove}) => (\n    <a className=\"tag is-primary is-light\" onClick={remove}>{name}</a>\n)\n\nEnabledFilterTag.propTypes = {\n    name: PropTypes.string,\n    remove: PropTypes.func\n}\n\nconst DisabledFilterTag = ({name, add}) => (\n    <a className=\"tag\" onClick={add}>{name}</a>\n)\n\nDisabledFilterTag.propTypes = {\n    name: PropTypes.string,\n    add: PropTypes.func\n}\n\nexport const EventFilterBlock = ({filterProps, withDivider}) => (\n    <React.Fragment>\n        <div className=\"filter-block\">\n            <EventFilterTags filterProps={filterProps} />\n        </div>\n        {withDivider ? <hr className=\"filter-block-divider\"/> : null}\n    </React.Fragment>\n)\n\nexport const EventFilterTags = ({filterProps: {allFilters, activeFilters, addFilter, removeFilter, clearFilters}}) => {\n    // Construct array of tag objects\n    let tags = []\n    for (const filter of allFilters) {\n        if (activeFilters.includes(filter)) {\n            tags.push(<EnabledFilterTag key={filter} name={filter} remove={removeFilter(filter)} />)\n        } else {\n            tags.push(<DisabledFilterTag key={filter} name={filter} add={addFilter(filter)} />)\n        }\n    }\n\n    return (\n        <span className=\"tags\">\n            <span className=\"tag is-white\">Filters: </span>\n            {tags}\n            <a className=\"tag is-delete\" onClick={clearFilters} />\n        </span>\n    )\n}\n\nEventFilterTags.propTypes = {\n    filterProps: PropTypes.shape({\n        allFilters: PropTypes.arrayOf(PropTypes.string),\n        activeFilters: PropTypes.arrayOf(PropTypes.string),\n        addFilter: PropTypes.func.isRequired,\n        removeFilter: PropTypes.func.isRequired,\n        clearFilters: PropTypes.func.isRequired\n    })\n}\n\nEventFilterBlock.propTypes = EventFilterTags.propTypes\n\n// Function to filter a list of events based on a list of types.\n// We return only events for whom all types in the filter are present.\nexport const filterEvents = (events, eventFilters) => {\n    return events.filter(event => eventFilters.every(eventType => event.frontmatter.eventTypes.includes(eventType)))\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\nimport { FaCalendar, FaListUl } from 'react-icons/fa'\n\nexport const CalendarViewToggle = ({view}) => (\n    <React.Fragment>\n        {['is-hidden-touch', 'is-hidden-desktop is-centered'].map(modifier => (\n            <div className={`tabs is-boxed ${modifier}`} key={modifier}>\n                <ul>\n                    <li className={view == 'calendar' ? 'is-active' : ''}>\n                        <Link to=\"/calendar\">\n                            <span className=\"icon is-small\"><FaCalendar /></span><h1>Calendar</h1>\n                        </Link>\n                    </li>\n                    <li className={view == 'upcoming' ? 'is-active' : ''}>\n                        <Link to=\"/events\">\n                            <span className=\"icon is-small\"><FaListUl /></span><h1>Events list</h1>\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        ))}\n    </React.Fragment>\n)\n\nCalendarViewToggle.propTypes = {\n    view: PropTypes.oneOf(['calendar', 'upcoming'])\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport _ from 'lodash'\n\nimport PreviewCompatibleImage from '../components/PreviewCompatibleImage'\nimport { HTMLContent } from '../components/Content'\nimport { site } from '../util/templating'\nimport { areSameDay, areCurrentYear, toDateTimeString } from '../util/dates'\nimport { PreviewContext } from '../util/context'\n\n\n\n// List of types shown near top of event\nconst EventTypeList = ({eventTypes}) => {\n    if (eventTypes) {\n        return (\n            <div className=\"tags\">\n                {eventTypes.map(eventType => <span key={eventType} className=\"tag\">{eventType}</span>)}\n            </div>\n        )\n    } else {\n        return null\n    }\n}\n\nEventTypeList.propTypes = {\n    eventTypes: PropTypes.arrayOf(PropTypes.string)\n}\n\n// used by website and CMS previews\nexport const EventInfo = ({image, slug, eventTypes, content, contentComponent}) => (\n    <PreviewContext.Consumer>\n        {value => <EventInfoWithContext isPreview={value} image={image} slug={slug}\n        eventTypes={eventTypes} content={content} contentComponent={contentComponent} />}\n    </PreviewContext.Consumer>\n)\n\nconst EventInfoWithContext = ({isPreview, image, slug, eventTypes, content, contentComponent}) => {\n    const BodyComponent = contentComponent || HTMLContent\n\n    return (\n        <React.Fragment>\n            <EventTypeList eventTypes={eventTypes} />\n            {!isPreview && slug ? (\n                <a className=\"button event-download-button\" href={`/ics${slug.slice(0, -1)}.ics`} download>\n                    Add to Calendar\n                </a>\n            ) : null}\n            <PreviewCompatibleImage imageInfo={image ? {src: _.get(image, 'srcNode.childImageSharp.fixedAspect.src', image.src),\n                                                        alt: image.alt} : null} />\n            <BodyComponent content={content} />\n        </React.Fragment>\n    )\n}\n\nEventInfoWithContext.propTypes = {\n    isPreview: PropTypes.bool,\n    eventTypes: EventTypeList.propTypes.eventTypes,\n    image: PropTypes.object.isRequired,\n    content: PropTypes.string.isRequired,\n    contentComponent: PropTypes.elementType\n}\n\nEventInfo.propTypes = EventInfoWithContext.propTypes\n\nexport const generateEventSubtitle = (data, isMobile=false) => {\n    const dateTimeRange = data.markdownRemark.frontmatter.dateTimeRange\n\n    const startDate = new Date(dateTimeRange.startDateTime)\n    const endDate = new Date(dateTimeRange.endDateTime)\n    \n    const bothCurrentYear = areCurrentYear(startDate, endDate)\n\n    const start = toDateTimeString(startDate, {isShort: isMobile, withYear: !bothCurrentYear})\n    \n    if (!dateTimeRange.provideEnd) {\n        return start\n    } else if (areSameDay(startDate, endDate)) {\n        return start + `–${endDate.toLocaleTimeString(\"en-GB\", {hour: \"2-digit\", minute: \"2-digit\"})}`\n    } else {\n        return start + ` – ${toDateTimeString(endDate, {isShort: isMobile, withYear: !bothCurrentYear})}`\n    }\n    // This allows for events to go on overnight / over multiple days\n}\n\nconst extractor = (data) => ({subtitle: generateEventSubtitle(data)})\n\nexport default site(EventInfo, { additionalPropsExtractor: extractor, isNarrow: true })\n\nexport const query = graphql`\nquery eventInfoTemplate($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n        ...EventFragment\n    }\n    heroData: allMarkdownRemark(filter: {id: {eq: $id}}) {\n        ...HeroFragment\n    }\n}\n`","import { useState } from 'react'\n\nexport const useFilters = (filterList) => {\n    const [filters, setFilters] = useState([])\n\n    const addFilter = (filterName) => (\n        () => {setFilters(filters.concat(filterName))}\n    )\n\n    const removeFilter = (filterName) => (\n        () => {setFilters(filters.filter(name => name !== filterName))}\n    )\n\n    const clearFilters = () => {\n        setFilters([])\n    }\n\n    return {\n        allFilters: filterList,\n        activeFilters: filters,\n        addFilter: addFilter,\n        removeFilter: removeFilter,\n        clearFilters: clearFilters\n    }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport _ from 'lodash'\n\nimport PreviewCompatibleImage from './PreviewCompatibleImage'\nimport { HTMLContentSmall } from './Content'\n\n// Component used in News Archive, Upcoming Events & Calendar Day Modal\n// CSS classes use name \"xpanel\" to distinguish from Bulma panel class\nexport const PanelBlock = ({panelData, emptyText, isViewportWidthDesktop}) => (\n    <div className={`xpanel-block`}>\n        {\n            getPanels(panelData, emptyText).map((panel, idx) => (\n                <div key={idx} className={`xpanel-background ${isViewportWidthDesktop ? \"is-viewport-width\" : \"\"}`}>\n                    <section className = \"section section-root\">\n                        <div className=\"container wide-container\">\n                            {panel}\n                        </div>\n                    </section>\n                </div>\n            ))\n        }\n    </div>\n)\n\nconst EmptyPanel = ({text}) => {\n    return (\n        <div className=\"xpanel\">\n            {text}\n        </div>\n    )\n}\n\nexport const Panel = ({image, slug, title, subtitle, mobileSubtitle, excerpt}) => {\n\n    const panelImage = <PanelImage image={image} />\n    const panelHeader = <PanelHeader slug={slug}\n                                     title={title}\n                                     subtitle={subtitle}\n                                     mobileSubtitle={mobileSubtitle} />\n    const panelExcerpt = <PanelExcerpt excerpt={excerpt} />\n\n    return (\n        <div className=\"xpanel\">\n            <div className=\"xpanel-header\">\n                {panelHeader}\n            </div>\n            <div className=\"xpanel-image\">\n                {panelImage}\n            </div>\n            <div className=\"xpanel-excerpt\">\n                {panelExcerpt}\n            </div>\n        </div>\n    )\n}\n\nconst PanelImage = ({image}) => {\n    if (image) {\n        const imageInfo = {\n            alt: image.alt,\n            src: _.get(image, 'srcNode.childImageSharp.fixedAspect.src', image.src)\n        }\n        return <PreviewCompatibleImage imageInfo={imageInfo} />\n    }\n    else {\n        return null\n    }\n}\n\nconst PanelHeader = ({slug, title, subtitle, mobileSubtitle}) => (\n    <Link to={slug}>\n        <h2 className={`title is-4 upcoming-title`}><strong>{title}</strong></h2>\n        <h3 className={`subtitle is-6 upcoming-subtitle is-hidden-mobile`}><strong>{subtitle}</strong></h3>\n        <h3 className={`subtitle is-6 upcoming-subtitle is-hidden-tablet`}><strong>{mobileSubtitle || subtitle}</strong></h3>\n    </Link>\n)\n\nconst PanelExcerpt = ({excerpt}) => (\n    <HTMLContentSmall content={excerpt} />\n)\n\n\nconst getPanels = (panelData, emptyText) => {\n    if (panelData.length > 0) {\n        return panelData.map((el, i) => <Panel image={el.image}\n                                               slug={el.slug}\n                                               title={el.title}\n                                               subtitle={el.subtitle}\n                                               mobileSubtitle={el.mobileSubtitle}\n                                               excerpt={el.excerpt}\n                                               key={i} />)\n    }\n    return [<EmptyPanel key=\"1\" text={emptyText || \"\"} />]\n}\n\nPanelExcerpt.propTypes = { excerpt: PropTypes.string }\n\nPanelHeader.propTypes = {\n    slug: PropTypes.string,\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    mobileSubtitle: PropTypes.string,\n}\n\nPanelImage.propTypes = { image: PropTypes.object }\n\nPanel.propTypes = {\n    image: PropTypes.object,\n    slug: PropTypes.string,\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    mobileSubtitle: PropTypes.string,\n    excerpt: PropTypes.string,\n}\n\nEmptyPanel.propTypes = { text: PropTypes.string }\n\nPanelBlock.propTypes = {\n    panelData: PropTypes.arrayOf(PropTypes.object).isRequired,\n    emptyText: PropTypes.string,\n    isViewportWidthDesktop: PropTypes.bool\n}\n","// List of allowed event types.\n// IF YOU UPDATE THIS LIST MAKE SURE YOU ALSO UPDATE THE LIST IN static/admin/config.yml\n// THEY MUST ALWAYS BE IDENTICAL\nexport const eventTypeList = [\n    'Benefit gig',\n    'Meeting - Programming',\n    'Meeting - Finance',\n    'Band competition',\n    'Other',\n]\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { PanelBlock } from '../Panel'\nimport { eventPropTypeValidator } from '../validators'\nimport { EventFilterBlock, filterEvents } from './EventFilter'\nimport { eventTypeList } from './EventType'\nimport { getEventList } from './getEventList'\nimport { PreviewContext } from '../../util/context'\nimport { useFilters } from '../../util/filters'\nimport { isOnOrAfterDay } from '../../util/dates'\nimport { generateEventSubtitle } from '../../templates/event-info'\n\n\nexport const Upcoming = ({events}) => (  // 'events' is only_ used if it is a preview, otherwise it uses a static query\n    <PreviewContext.Consumer>\n        {value => <UpcomingWithContext isPreview={value} previewEventList={events} />}\n    </PreviewContext.Consumer>\n)\n\nconst UpcomingWithContext = ({isPreview, previewEventList}) => {\n    const filterProps = useFilters(eventTypeList)\n\n    // Get list of events occurring today or later\n    let events = isPreview ? previewEventList : getEventList()\n    events = events.filter(event => isOnOrAfterDay(new Date(), new Date(event.frontmatter.dateTimeRange.provideEnd ? event.frontmatter.dateTimeRange.endDateTime : event.frontmatter.dateTimeRange.startDateTime)))\n\n    const maxItems = 5\n\n    // Construct array of event panel data\n    const panelData = filterEvents(events, filterProps.activeFilters).slice(0, maxItems).map(event => getEventPanelData(event))\n\n    const emptyText = \"No events match the selected filters.\"\n\n    return (\n        <React.Fragment>\n            <h1 className=\"title\">Upcoming Events</h1>\n            <div>\n                <EventFilterBlock filterProps={filterProps} withDivider={false} />\n                <PanelBlock panelData={panelData} emptyText={emptyText} isViewportWidthDesktop={true}/>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport const getEventPanelData = (event) => {\n    return {\n        image: event.frontmatter.image,\n        slug: event.fields.slug,\n        title: event.frontmatter.title,\n        subtitle: generateEventSubtitle({markdownRemark: event}, false),\n        mobileSubtitle: generateEventSubtitle({markdownRemark: event}, true),\n        excerpt: event.excerpt\n    }\n}\n\n\nUpcoming.propTypes = {\n    events: PropTypes.arrayOf(\n        PropTypes.shape({\n            node: eventPropTypeValidator\n        })\n    )\n}\n\nUpcomingWithContext.propTypes = {\n    isPreview: PropTypes.bool.isRequired,\n    previewEventList: Upcoming.propTypes.events\n}\n","import { useStaticQuery, graphql } from 'gatsby'\n\nimport { areSameMinute } from '../../util/dates'\n\nexport const getEventList = () => {\n  const { allMarkdownRemark } = useStaticQuery(graphql`\n  query eventList {\n      allMarkdownRemark(filter: {frontmatter: {templateKey: {eq: \"event-info\"}}}, sort: {fields: frontmatter___dateTimeRange___startDateTime, order: ASC}) {\n          nodes {\n              ...EventFragment\n          }\n      }\n  }\n  `)\n\n  // Already started by start time, but if two events start at the same time, we want to sort then by the end time (if provided).\n  const nodesSorted = allMarkdownRemark.nodes.sort((event1, event2) => {\n    const range1 = event1.frontmatter.dateTimeRange\n    const range2 = event2.frontmatter.dateTimeRange\n    const start1 = new Date(range1.startDateTime)\n    const start2 = new Date(range2.startDateTime)\n\n    // Only need to do anything if they start at the same time\n    if (areSameMinute(start1, start2)) {\n      // Four cases, for each combination of each providing or not providing an end time.\n      // We'll deal with them all.\n      if (range1.provideEnd) {\n        const end1 = new Date(range1.endDateTime)\n\n        if (range2.provideEnd) {\n          const end2 = new Date(range2.endDateTime)\n          // Both ends provided, so sort by end date\n          return end1 - end2\n        } else {\n          // Range 2 has no defined end time, so ends first\n          return 1\n        }\n      } else {\n        if (range2.provideEnd) {\n          // Range 1 has no defined end time, so ends first\n          return -1\n        } else {\n          // Neither have a defined end, so they occur at the same time\n          return 0\n        }\n      }\n    } else {\n      // Leave in current order\n      return 0\n    }\n  })\n\n  return nodesSorted\n}\n"],"sourceRoot":""}